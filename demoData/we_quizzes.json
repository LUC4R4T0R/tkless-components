{

  "geschichte_des_www_quiz": {
    "key": "geschichte_des_www_quiz",
    "title": "Geschichte des WWW",
    "questions": [
      {
        "text": "Aus welchem Jahr stammt die \"Geburtsurkunde\" des WWW?",
        "answers": [
          "2001",
          "1989",
          "1990",
          "1988"
        ],
        "input": "radio",
        "correct": 1
      },
      {
        "text": "Wer geht als der Erfinder des WWW in die Geschichte ein?",
        "answers": [
          {
            "text": "Mike Sandel",
            "comment": "Mike Sandel war der Chef von Tim Berners-Lee, aber nicht der Erfinder des WWW."
          },
          "Tim Berners-Lee",
          {
            "text": "Robert Cailliau",
            "comment": "Robert Cailliau ist der erste Web-Surfer und Freund von Tim-Berners-Lee, aber nicht der Erfinder des WWW. Er hat jedoch das Proposal von Tim-Berners-Lee mehrfach überarbeitet, um es verständlicher zu machen."
          },
          {
            "text": "Larry Page",
            "comment": "Larry Page ist ein Google-Gründer, aber nicht der Erfinder des WWW."
          },
          {
            "text": "Jeff Bezos",
            "comment": "Jeff Bezos ist der Amazon Gründer, aber nicht der Erfinder des WWW."
          }
        ],
        "input": "radio",
        "correct": 1
      },
      {
        "text": "Wie hieß der urspüngliche Titel des Proposals von Tim Berners-Lee, aus dem das WWW hervor gegangen ist?",
        "answers": [
          "World Wide Web (WWW)",
          "Internetmanagement",
          "Information Management",
          "Netz der Netze"
        ],
        "input": "radio",
        "correct": 2
      },
      {
        "text": "Wo ist das WWW erfunden worden?",
        "answers": [
          {
            "text": "am MIT",
            "comment": "Heute arbeitet Tim-Berners-Lee dort, aber nicht damals, als er das WWW erfand."
          },
          "am Kernforschungszentrum CERN in Genf in der Schweiz",
          {
            "text": "in Los Alamos in den USA",
            "comment": "Dort wurde die Atombombe gebaut, aber nicht das WWW."
          },
          {
            "text": "in Silicon Valley, Kalifornien",
            "comment": "Dort ist das Zentrum der IT-Industrie, aber das WWW ist dort nicht entstanden."
          }
        ],
        "input": "radio",
        "correct": 1
      },
      {
        "text": "Wie lange dauerte die Entwicklung des ersten Prototypes des WWW durch Tim-Berners-Lee?",
        "answers": [
          "3 Monate",
          "1 Jahr",
          "2 Jahre",
          "3 Jahre"
        ],
        "input": "radio",
        "correct": 0
      },
      {
        "text": "Auf welcher Maschine wurde der erste WWW-Prototyp entwickelt?",
        "answers": [
          "auf einem PC unter Windows",
          "auf einem Mac unter einem Apple-Betriebssystem",
          "auf einem Next-Rechner von 1990",
          "auf einer SUN SparcStation",
          "auf einer Unix-Kiste"
        ],
        "input": "radio",
        "correct": 2
      },
      {
        "text": "Was war der Auftrag des Arbeitgebers an Tim-Berners-Lee?",
        "answers": [
          {
            "text": "das WWW zu entwickeln",
            "comment": "Niemand wollte das WWW im CERN."
          },
          "die Next-Maschine zu testen",
          {
            "text": "Erfahrungen mit Unix zu sammeln",
            "comment": "Ja, auch, eigentlich das Next-OS."
          }
        ],
        "input": "radio",
        "correct": 1
      },
      {
        "text": "Wie ist der erste Prototyp entstanden?",
        "answers": [
          "Tim Berners-Lee war ein Programmierer und sein Chef hat ihn mit der Entwicklung des WWW beauftragt.",
          "Tim Berners-Lee reichte bei seinem Vorgesetzten sein Proposal zweimal ein - ohne Reaktion des Managements.",
          "Das Management verstand es nicht.",
          "Auf der Hypertext-Konferenz wurde sein Beitrag abgelehnt, obwohl er den Browser, HTTP und HTML innerhalb von 3 Monaten implementiert hatte - als U-Boot-Projekt.",
          "Der eigentliche Auftrag des Vorgesetzten an Tim Berners-Lee war die Erprobung des neuen NEXT-Computers der damals neuen Firma NEXT von Steve Jobs, der gerade aus seiner eigenen Firma Apple gefeuert worden war."
        ],
        "correct": [ false, true, true, true, true ]
      },
      {
        "text": "Was ist das WWW heute?",
        "answers": [
          {
            "text": "das Internet",
            "comment": "Das Internet ist nur die Basis für das WWW."
          },
          {
            "text": "die wichtigste Plattform für die kollektive Intelligenz",
            "comment": "Siehe Video \"Geschichte des WWW\" an der Stelle 27:40"
          },
          {
            "text": "Online Publikation",
            "comment": "Aber nicht nur"
          },
          {
            "text": "Kommunikationsplattform",
            "comment": "Aber nicht nur"
          },
          {
            "text": "Kooperationsplattform",
            "comment": "Nicht nur"
          }
        ],
        "correct": [ false, true, true, true, true ]
      },
      {
        "text": "Warum lohnt es sich, sich mit WWW auseinander zu setzen?",
        "answers": [
          "Die Verbreitung des WWW hat zu umfassenden Umwälzungen in vielen Lebensbereichen geführt.",
          "Das WWW trug zu einem Modernisierungsschub in vielen Wirtschaftsbereichen sowie zur Entstehung neuer Wirtschaftszweige bei und hat zu einem grundlegenden Wandel des Kommunikationsverhaltens und der Mediennutzung im beruflichen und privaten Bereich geführt.",
          "Die kulturelle Bedeutung des WWW wird manchmal mit der Erfindung des Buchdrucks gleichgesetzt."
        ],
        "correct": [ true, true, true ]
      }
    ]
  },
  "css_grundlagen": {
    "key": "css_positionierung",
    "title": "CSS-Positionierung und mehrspaltige Layouts",
    "questions": [
      {
        "text": "Wann und wie kollabieren Margins?",
        "answers": [
          {
            "text": "Zwei Margins kollabieren, wenn das Fenster zu klein ist.",
            "comment": "Zwei Margins kollabieren, wenn margin-top des unteren und margin-bottom des darüberliegenden divs verschmelzen. Der größere gewinnt."
          },
          {
            "text": "Zwei Margins kollabieren, wenn margin-top des unteren und margin-bottom des darüberliegenden divs verschmelzen. Der größere gewinnt."
          }
        ],
        "input": "radio",
        "correct": 1
      },
      {
        "text": "Was ist der Unterschied zwischen einer Block-Box und einer Inline-Box?",
        "answers": [
          {
            "text": "Eine Block-Box erscheint als Block, eine Inline-Box inline.",
            "comment": "Die Erklärung ist ein wenig zu einfach."
          },
          {
            "text": "Bei einer Block-Box gibt es width und height. Bei einer Inline-Box nur font-size. Die Breite einer Inline-Box wird automatisch aus ihrem Inhalt berechnet. Bei einer Inline-Box fehlen außerdem margin-top und margin-bottom."
          }
        ],
        "input": "radio",
        "correct": 1
      },
      {
        "text": "Was ist der Unterschied zwischen inline und inline-block?",
        "answers": [
          {
            "text": "inline = kein width, Breite wird aus Inhalt berechnet; inline-block hat width"
          },
          {
            "text": "inline wird in einer Zeile layoutet, inline-block als Kasten.",
            "comment": "Die Erklärung ist ein wenig zu einfach."
          }
        ],
        "input": "radio",
        "correct": 0
      },
      {
        "text": "Kreuzen Sie bei folgenden HTML-Elementen an, ob sie Block-Elemente und keine Inline-Elemente sind:",
        "encode": true,
        "answers": [
          {
            "text": "<div>",
            "comment": "HTML-Block-Element"
          },
          {
            "text": "<h1> - <h6>",
            "comment": "HTML-Block-Element"
          },
          {
            "text": "<label>",
            "comment": "Inline-Element"
          },
          {
            "text": "<a>",
            "comment": "Inline-Element"
          },
          {
            "text": "<img>",
            "comment": "Inline-Element"
          },
          {
            "text": "<p>",
            "comment": "HTML-Block-Element"
          },
          {
            "text": "<form>",
            "comment": "HTML-Block-Element"
          },
          {
            "text": "<header>",
            "comment": "HTML-Block-Element"
          },
          {
            "text": "<footer>",
            "comment": "HTML-Block-Element"
          },
          {
            "text": "<section>",
            "comment": "HTML-Block-Element"
          },
          {
            "text": "<ul>",
            "comment": "HTML-Block-Element"
          },
          {
            "text": "<ol>",
            "comment": "HTML-Block-Element"
          },
          {
            "text": "<li>",
            "comment": "HTML-Block-Element"
          },
          {
            "text": "<span>",
            "comment": "Inline-Element"
          }
        ],
        "input": "checkbox",
        "correct": [0,1,5,6,7,8,9,10,11,12]
      }
    ]
  },
  "css_positionierung": {
    "key": "css_positionierung",
    "title": "CSS-Positionierung und mehrspaltige Layouts",
    "questions": [
      {
        "text": "Was bedeutet 'position:static'?",
        "answers": [
          {
            "text": "statische Positionierung immer an der gleichen Stelle",
            "comment": "Elemente erscheinen an verschiedenen Stellen, z.B. divs untereinander"
          },
          {
            "text": "Standard-Positionierung",
            "comment": "Block-Elemente erscheinen untereinander und Inline-Elemente nebeneinander"
          }
        ],
        "input": "radio",
        "correct": 1
      },
      {
        "text": "Was bedeutet 'position:fixed'?",
        "answers": [
          {
            "text": "Fixierte Elemente haben auf einer Webseite eine feste Position",
            "comment": "Nicht auf der Webseite, sondern im Browser-Fenster"
          },
          {
            "text": "Beim Scrollen bewegen sich fixierte Elemente nicht mit."
          }
        ],
        "input": "radio",
        "correct": 1
      },
      {
        "text": "Was bedeutet 'position:absolute'?",
        "answers": [
          {
            "text": "Absolute Positionierung auf dem Bildschirm",
            "comment": "nicht auf dem Bildschirm"
          },
          {
            "text": "Absolute Positionierung im gesamten Browser",
            "comment": "man kann nichts außerhalb der Webseite positionieren"
          },
          {
            "text": "Absolute Positionierung im umgebenden Element"
          }
        ],
        "input": "radio",
        "correct": 2
      },
      {
        "text": "Was bedeutet 'position:relative'?",
        "answers": [
          {
            "text": "Relative Positionierung auf dem Bildschirm",
            "comment": "nicht auf dem Bildschirm"
          },
          {
            "text": "Relative Positionierung im gesamten Browser",
            "comment": "man kann nichts außerhalb der Webseite positionieren"
          },
          {
            "text": "Positionierung relativ zum Browser-Fenster",
            "comment": "man kann nichts außerhalb der Webseite positionieren"
          },
          {
            "text": "Positionierung relativ zur normalen Positionierung im umgebenden Element",
            "comment": "relativ zu position:static"
          }
        ],
        "input": "radio",
        "correct": 3
      },
      {
        "text": "Was ist der z-Index?",
        "answers": [
          {
            "text": "Die Farbe des HTML-Elements",
            "comment": "Die Farbe des HTML-Elements wird mit color-Attributen festgelegt."
          },
          {
            "text": "Der Alpha-Kanal",
            "comment": "Der Alphakanal oder α-Kanal ist ein zusätzlicher Kanal, der in Rastergrafiken zusätzlich zu den Farbinformationen die Transparenz (Durchsichtigkeit) der einzelnen Pixel (Bildpunkte) speichert."
          },
          {
            "text": "Die Reihenfolge der Elemente in der z-Achse (Vordergrund, Hintergrund)",
            "comment": "Genau!"
          }
        ],
        "input": "radio",
        "correct": 2
      }
    ]
  },

  "quiz_javascript_crashkurs": {
    "key": "quiz_javascript_crashkurs",
    "title": "JavaScript – Crashkurs",
    "questions": [
      {
        "text": "Was ergibt der JavaScript-Ausdruck 'a'/'b' ?",
        "answers": [
          {
            "text": "'ab'",
            "comment": "/ ist kein Textoperator."
          },
          {
            "text": "'a/b'",
            "comment": "/ ist ein Operator und kein Text."
          },
          {
            "text": "NaN",
            "comment": "Division ist kein Textoperator."
          },
          {
            "text": "null",
            "comment": "Weil null ein Objekt ist und / ein Rechenoperator."
          },
          {
            "text": "undefined",
            "comment": "Weil undefined undefiniert ist und mit dem Rechenoperator NaN oder eine Number berechnet wird."
          },
          {
            "text": "Object",
            "comment": "Weil mit / gerechnet wird."
          }
        ],
        "input": "checkbox",
        "correct": [
          2
        ]
      },
      {
        "text": "Was ergibt der JavaScript-Ausdruck 'a'+'b' ?",
        "answers": [
          {
            "text": "'ab'",
            "comment": "Weil + für String-Konkatenation steht."
          },
          {
            "text": "'a/b'",
            "comment": "Weil + und / verschieden sind."
          },
          {
            "text": "NaN",
            "comment": "Weil + ein polymorpher Operator ist."
          },
          {
            "text": "null",
            "comment": "Weil String-Konkatenation kein Null-Objekt erzeugt."
          },
          {
            "text": "undefined",
            "comment": "Weil String-Konkatenation definiert ist."
          },
          {
            "text": "string",
            "comment": "Weil string ein Typ ist und nicht der Wert des Ausdrucks."
          }
        ],
        "input": "checkbox",
        "correct": [
          0
        ]
      },
      {
        "text": "Was ergibt der JavaScript-Ausdruck 'a'+1 ?",
        "answers": [
          {
            "text": "TypeError",
            "comment": "Weil JavaScript bei inkompatiblen Typen eine Typanpassung (type coercion) durchführt."
          },
          {
            "text": "'a1'",
            "comment": "Weil eine Typanpassung (type coercion) stattfindet."
          },
          {
            "text": "NaN",
            "comment": "Weil JavaScript bei inkompatiblen Typen eine Typanpassung (type coercion) durchführt. "
          },
          {
            "text": "null",
            "comment": "Weil JavaScript bei inkompatiblen Typen eine Typanpassung (type coercion) durchführt."
          },
          {
            "text": "undefined",
            "comment": "Weil JavaScript bei inkompatiblen Typen eine Typanpassung (type coercion) durchführt."
          },
          {
            "text": "string",
            "comment": "Weil String der Ergebnis-Typ, aber nicht der Ergebnis-Wert ist."
          }
        ],
        "input": "checkbox",
        "correct": [
          1
        ]
      },
      {
        "text": "Was ergibt der JavaScript-Ausdruck 0.1+0.2 ?",
        "answers": [
          {
            "text": "'0.10.2'",
            "comment": "Weil hier Zahlen addiert werden, nicht Strings."
          },
          {
            "text": "0.3",
            "comment": "Weil es zu Repräsentationsfehlern kommt."
          },
          {
            "text": "0.30000000000000004",
            "comment": "Weil es zu Repräsentationsfehlern kommt."
          },
          {
            "text": "NaN",
            "comment": "Weil es sich doch um Zahlen handelt."
          },
          {
            "text": "null",
            "comment": "Weil kein Nullobjekt bei der Addition entsteht."
          },
          {
            "text": "undefined",
            "comment": "Weil das Ergebnis klar definiert ist."
          },
          {
            "text": "Number",
            "comment": "Weil Number der Ergebnis-Typ, aber nicht der Ergebnis-Wert ist."
          },
          {
            "text": "int",
            "comment": "Weil JavaScript kein int kennt."
          }
        ],
        "input": "checkbox",
        "correct": [
          2
        ]
      },
      {
        "text": "Was ergibt der JavaScript-Ausdruck 0.1+0.2==0.3 ?",
        "answers": [
          {
            "text": "'0.10.2==0.3'",
            "comment": "Weil hier Zahlen addiert werden, nicht Strings."
          },
          {
            "text": "0.3",
            "comment": "Weil bei einem Vergleich keine Zahl berechnet wird."
          },
          {
            "text": "false",
            "comment": "Weil es zu Repräsentationsfehlern kommt."
          },
          {
            "text": "NaN",
            "comment": "Weil es Zahlen sind."
          },
          {
            "text": "null",
            "comment": "Weil kein Nullobjekt bei einem Vergleich entsteht."
          },
          {
            "text": "undefined",
            "comment": "Weil der Vergleich sehr wohl definiert ist."
          },
          {
            "text": "Number",
            "comment": "Weil hier ein Vergleich vorliegt."
          },
          {
            "text": "int",
            "comment": "Weil JavaScript kein int kennt. "
          }
        ],
        "input": "checkbox",
        "correct": [
          2
        ]
      },
      {
        "text": "Welche der folgenden JavaScript-Ausdrücke sind korrekt und vom Typ 'Object'?",
        "answers": [
          {
            "text": "{}"          },
          {
            "text": "{a}",
            "comment": "Weil zu jedem Key ein Value gehören muss."
          },
          {
            "text": "{a:1}"
          },
          {
            "text": "{'a':1}"
          },
          {
            "text": "{'a':'1'}"
          },
          {
            "text": "{'a':'a'}"
          },
          {
            "text": "{a:undefined}"
          },
          {
            "text": "{undefined}",
            "comment": "Weil zu jedem Key ein Value gehören muss."
          }
        ],
        "input": "checkbox",
        "correct": [
          0,
          2,
          3,
          4,
          5,
          6
        ]
      },
      {
        "text": "Welcher Ausdruck in JavaScript ergibt (als Ergebnis der Evaluation) den Wert true?",
        "answers": [
          {
            "text": "{a:1}==={a:1}",
            "comment": "Weil hier 2 Objekte erzeugt werden, die zwar den gleichen Inhalt haben, aber verschiedene Objekte sind."
          },
          {
            "text": "0.1+0.2===0.3",
            "comment": "Weil 0.1+0.2 in Binär-Repräsentationen leider 0.30000000000000004 ergibt."
          },
          {
            "text": "null === undefined",
            "comment": "Weil das Nullobjekt nicht undefiniert ist."
          },
          {
            "text": "null == undefined"
          },
          {
            "text": "null === null"
          },
          {
            "text": "undefined === undefined"
          },
          {
            "text": "false == ''"
          },
          {
            "text": "[ ] == false"
          },
          {
            "text": "0 == false"
          },
          {
            "text": "false == { }",
            "comment": "Weil das leere Objekt nicht falsch ist."
          }
        ],
        "input": "checkbox",
        "correct": [
          3,
          4,
          5,
          6,
          7,
          8
        ]
      }
    ]
  },

  "quiz_javascript": {
    "key": "quiz_javascript",
    "title": "Quiz zu JavaScript",
    "questions": [

      {
        "text": "Welche Datentypen gibt es in JavaScript?",
        "answers": [
          {
            "text": "int",
            "comment": "ist ein Datentyp in Java, nicht in JavaScript. In JavaScript gibt es nur einen Zahlentyp, nämlich Number."
          },
          {
            "text": "float",
            "comment": "ist ein Datentyp in Java, nicht in JavaScript. In JavaScript gibt es nur einen Zahlentyp, nämlich Number."
          },
          {
            "text": "double",
            "comment": "ist ein Datentyp in Java, nicht in JavaScript. In JavaScript gibt es nur einen Zahlentyp, nämlich Number."
          },
          {
            "text": "Number"
          },
          {
            "text": "Object"
          },
          {
            "text": "Array",
            "comment": "Array ist kein eigener Datentyp in JavaScript. typeof Array liefert function. typeof [ ] liefert object."
          },
          {
            "text": "String"
          },
          {
            "text": "var",
            "comment": "ist ein Schlüsselwort, kein Datentyp"
          },
          {
            "text": "null",
            "comment": "ist ein Wert, kein Datentyp"
          },
          {
            "text": "undefined",
            "comment": "ist ein Wert, kein Datentyp"
          },
          {
            "text": "NaN",
            "comment": "ist ein Wert, kein Datentyp. typeof NaN === Number."
          }
        ],
        "input": "checkbox",
        "correct": [
          3,
          4,
          6
        ]
      },
      {
        "text": "Wie kann man den Typ einer Variablen x abfragen?",
        "answers": [
          {
            "text": "type(x)",
            "comment": "Weil type keine Funktion ist."
          },
          {
            "text": "typeof(x)"
          },
          {
            "text": "typeof x"
          },
          {
            "text": "x.type",
            "comment": "Weil type keine Eigenschaft von x ist."
          }
        ],
        "input": "checkbox",
        "correct": [
          1, 2
        ]
      },
      {
        "text": "Welcher der folgenden JavaScript-Ausdrücke evaluiert zu true?",
        "answers": [
          {
            "text": "isNaN('a'/2)",
            "comment": "Weil man Strings nicht halbieren kann ;-)"
          },
          {
            "text": "isNaN(null)",
            "comment": "Weil null das Null-Objekt ist."
          },
          {
            "text": "isNaN(undefined)"
          },
          {
            "text": "isNaN(NaN)"
          },
          {
            "text": "isNaN(!3)",
            "comment": "Weil !3 false ist, also vom Typ boolean."
          }
        ],
        "input": "checkbox",
        "correct": [
          0,
          2,
          3
        ]
      },
      {
        "text": "Welcher der folgenden JavaScript-Ausdrücke evaluiert zu true, wenn a den Wert 2 und b den Wert 3 hat?",
        "answers": [
          {
            "text": "a==b",
            "comment": "Weil 2 != 3."
          },
          {
            "text": "a!=b"
          },
          {
            "text": "a&lt;b"
          },
          {
            "text": "a>b",
            "comment": "Weil 2 nicht größer als 3 ist."
          },
          {
            "text": "a&lt;=b"
          },
          {
            "text": "a>=b",
            "comment": "Weil 2 nicht größer gleich 3 ist."
          },
          {
            "text": "b==='3'",
            "comment": "Weil 3 und der String 3 verschieden sind."
          },
          {
            "text": "b=='3'",
            "comment": "Weil 3 und '3' nach Typanpassung (type coercion) gleich sind."
          },
          {
            "text": "b!=='3'",
            "comment": "Weil 3 und der String 3 verschieden sind."
          }
        ],
        "input": "checkbox",
        "correct": [
          1,
          2,
          4,
          7,
          8
        ]
      },
      {
        "text": "Welcher der folgenden JavaScript-Ausdrücke evaluiert zu true?",
        "answers": [
          {
            "text": "((1==2)&&(3<4))",
            "comment": "Weil 1 nicht gleich 2 ist."
          },
          {
            "text": "((1==2)||(3<4))",
            "comment": "Weil 3 < 4."
          },
          {
            "text": "!(1==2)"
          },
          {
            "text": "(3<4)?true:false"
          }
        ],
        "input": "checkbox",
        "correct": [
          1,
          2,
          3
        ]
      },
      {
        "text": "Was ist die Ausgabe von <pre style=\"background-color:#ffffff;color:#000000;font-family:'Menlo';font-size:9,0pt;\"><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"><span style=\"color:#000080;font-weight:bold;\">var </span><span style=\"color:#660e7a;font-weight:bold;font-style:italic;\">a </span>= <span style=\"color:#008000;font-weight:bold;\">\"Web\"</span>;<br><span style=\"color:#660e7a;font-weight:bold;font-style:italic;\">a </span>+= <span style=\"color:#008000;font-weight:bold;\">\"Engineering\"</span>;<br><span style=\"color:#000080;font-weight:bold;\">var </span><span style=\"color:#660e7a;font-weight:bold;font-style:italic;\">b </span>= <span style=\"color:#0000ff;\">6</span>;<br><span style=\"color:#660e7a;font-weight:bold;font-style:italic;\">b </span>*= <span style=\"color:#0000ff;\">7</span>;<br><span style=\"color:#660e7a;font-weight:bold;\">console</span>.<span style=\"color:#7a7a43;\">log</span>(<span style=\"color:#660e7a;font-weight:bold;font-style:italic;\">a </span>+ <span style=\"color:#660e7a;font-weight:bold;font-style:italic;\">b</span>);</pre>",
        "answers": [ "Ausgabe" ],
        "input": "text",
        "correct": [ "WebEngineering42" ]
      },
      {
        "text": "Was ist die Ausgabe von <pre style=\"background-color:#ffffff;color:#000000;font-family:'Menlo';font-size:9,0pt;\"><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"><span style=\"color:#000080;font-weight:bold;\">var </span><span style=\"font-style:italic;\">g </span>= <span style=\"color:#000080;font-weight:bold;\">function</span>(a,b){<br> <span style=\"color:#000080;font-weight:bold;\">return </span>a * b;<br>};<br><br><span style=\"color:#660e7a;font-weight:bold;\">console</span>.<span style=\"color:#7a7a43;\">log</span>(<span style=\"font-style:italic;\">f</span>(<span style=\"color:#0000ff;\">4</span>));<br><br><span style=\"color:#000080;font-weight:bold;\">function </span><span style=\"font-style:italic;\">f</span>(x){<br> <span style=\"color:#000080;font-weight:bold;\">return </span>x * <span style=\"font-style:italic;\">g</span>(<span style=\"color:#0000ff;\">3</span>,x)<br>}</pre>",
        "answers": [ "Ausgabe" ],
        "input": "number",
        "correct": [ "48" ]
      },
      {
        "text": "Was ist die Ausgabe von <pre style=\"background-color:#ffffff;color:#000000;font-family:'Menlo';font-size:9,0pt;\"><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"><span style=\"background-color:#ffe4ff;\">x</span> = <span style=\"color:#0000ff;\">1</span>;<br><span style=\"color:#000080;font-weight:bold;\">var </span><span style=\"color:#660e7a;font-weight:bold;font-style:italic;\">y </span>= <span style=\"color:#0000ff;\">2</span>;<br><span style=\"color:#000080;font-weight:bold;\">function </span><span style=\"font-style:italic;\">f</span>(x){<br> <span style=\"background-color:#ffe4ff;\">x</span> = <span style=\"color:#0000ff;\">3</span>;<br> <span style=\"color:#000080;font-weight:bold;\">var </span><span style=\"color:#458383;\">y </span>= <span style=\"color:#0000ff;\">4</span>;<br> <span style=\"color:#000080;font-weight:bold;\">return </span><span style=\"background-color:#e4e4ff;\">x</span>*<span style=\"color:#458383;\">y</span>;<br>}<br><span style=\"color:#660e7a;font-weight:bold;\">console</span>.<span style=\"color:#7a7a43;\">log</span>(<span style=\"font-style:italic;\">f</span>(<span style=\"color:#0000ff;\">5</span>));</pre>",
        "answers": [ "Ausgabe" ],
        "input": "number",
        "correct": [ "12" ]
      },
      {
        "text": "Was ist die Ausgabe von <pre style=\"background-color:#ffffff;color:#000000;font-family:'Menlo';font-size:9,0pt;\"><span style=\"background-color:#ffe4ff;\">x</span> = <span style=\"color:#0000ff;\">1</span>;<br><span style=\"color:#000080;font-weight:bold;\">var </span><span style=\"color:#660e7a;font-weight:bold;font-style:italic;\">y </span>= <span style=\"color:#0000ff;\">2</span>;<br><span style=\"color:#000080;font-weight:bold;\">function </span><span style=\"font-style:italic;\">f1</span>(x){<br> <span style=\"background-color:#ffe4ff;\">x</span> = <span style=\"color:#0000ff;\">3</span>;<br> <span style=\"color:#000080;font-weight:bold;\">var </span><span style=\"color:#458383;\">y </span>= <span style=\"color:#0000ff;\">4</span>;<br> <span style=\"color:#000080;font-weight:bold;\">return </span><span style=\"font-style:italic;\">f2</span>(<span style=\"background-color:#e4e4ff;\">x</span>*<span style=\"color:#458383;\">y</span>);<br>}<br><span style=\"color:#660e7a;font-weight:bold;\">console</span>.<span style=\"color:#7a7a43;\">log</span>(<span style=\"font-style:italic;\">f1</span>(<span style=\"color:#0000ff;\">5</span>));<br><span style=\"color:#000080;font-weight:bold;\">function </span><span style=\"font-style:italic;\">f2</span>(z){<br> <span style=\"color:#000080;font-weight:bold;\">return </span>z+<span style=\"background-color:#e4e4ff;\">x</span>+<span style=\"color:#660e7a;font-weight:bold;font-style:italic;\">y</span>;<br>}</pre>",
        "answers": [ "Ausgabe" ],
        "input": "number",
        "correct": [ "15" ]
      },
      {
        "text": "Thema Datentypen: Was ist das Ergebnis folgender JavaScript-Ausdrücke?",
        "answers": [
          {
            "text": "typeof Array",
            "comment": "Array ist kein Datentyp in JavaScript."
          },
          {
            "text": "typeof [ ]",
            "comment": "Array ist kein Datentyp in JavaScript."
          },
          {
            "text": "typeof (new Date())",
            "comment": "ein neues Date-Objekt"
          },
          {
            "text": " typeof Date",
            "comment": "die Funktion zur Konstruktion neuer Date-Objekte"
          },
          {
            "text": "typeof new Date",
            "comment": "ein neues Date-Objekt"
          },
          {
            "text": "typeof true",
            "comment": "boolescher Wert"
          },
          {
            "text": "typeof false",
            "comment": "boolescher Wert"
          },
          {
            "text": " typeof \"false\"",
            "comment": "wegen der Apostrophe"
          },
          {
            "text": "typeof function(){}",
            "comment": "Auch eine leere Funktion ist eine Funktion."
          },
          {
            "text": "f = function(){}; typeof f",
            "comment": "Auch eine leere Funktion ist eine Funktion."
          },
          {
            "text": " typeof f()",
            "comment": "ohne return liefert die Funktion nichts zurück"
          }
        ],
        "input": "text",
        "correct": [ "function", "object", "object", "function", "object", "boolean", "boolean", "string", "function", "function", "undefined"  ]
      },

      {
        "text": "Thema Array: Was ist das Ergebnis folgender Eingaben in die JavaScript-Konsole (dargestellt mit js>) ?",
        "answers": [
          {
            "text": "js> x = [1,2,3]",
            "comment": "Rückgabe ist das Array selbst."
          },
          {
            "text": "js> x.length",
            "comment": "Länge ist keine Methode, sondern eine Property."
          },
          {
            "text": "js> x[0]",
            "comment": "Zugriff auf die erste Stelle. Index fängt bei 0 an."
          },
          {
            "text": "js> x[1]",
            "comment": "Zugriff auf die zweite Stelle. Index fängt bei 0 an."
          },
          {
            "text": "js> x.join(' * ')",
            "comment": "Alle Elemente zu einem String verbinden."
          },
          {
            "text": "js> x.indexOf(2)",
            "comment": "Suche die erste Stelle mit einer 2."
          },
          {
            "text": "js> x.pop()",
            "comment": "Entferne das letzte Element."
          },
          {
            "text": "js> x",
            "comment": "Das letzte Element ist mittels pop() entfernt."
          },
          {
            "text": "js> x.push(3)",
            "comment": "Füge die 3 wieder hinte an."
          },
          {
            "text": "js> x.reverse()",
            "comment": "Drehe x um."
          },
          {
            "text": "js> x.shift()",
            "comment": "Links-Shift: Entferne das erste Element."
          },
          {
            "text": "js> x",
            "comment": "Erstes Element entfernt mittels shift()"
          },
          {
            "text": "js> y = x.concat(3,4,5,6)",
            "comment": "Hänge 3,4,5,6 hinten an."
          },
          {
            "text": "js> x",
            "comment": "x bleibt bei x.concat(3,4,5,6) unverändert."
          },
          {
            "text": "js> y.slice(2,6)",
            "comment": "Scheibe herausgeschnitten von 2 bis 6"
          },
          {
            "text": "js> y.splice(1,1,2)",
            "comment": "Lösche an der Stelle 1 ein Element und füge dort 2 neu ein."
          },
          {
            "text": "js> y",
            "comment": "y nach y.splice(1,1,2)"
          },
          {
            "text": "js> y.splice(0,1,1)",
            "comment": "Lösche an der Stelle 0 ein Element und füge dort 1 neu ein."
          },
          {
            "text": "js> y",
            "comment": "y ist durch die beiden splice-Operationen wieder hergestellt."
          },
          {
            "text": "js> x.sort()",
            "comment": "x sortiert."
          },
          {
            "text": "js> x = [1, 2, 3, 3, 3, 3]",
            "comment": "x mit vielen 3."
          },
          {
            "text": "js> x.lastIndexOf(3)",
            "comment": "die Stelle mit der letzten 3."
          }
        ],
        "input": "text",
        "correct": [
          "[1, 2, 3]",
          "3",
          "1",
          "2",
          "\"1 * 2 * 3\"",
          "1",
          "3",
          "[1, 2]",
          "3",
          "[3, 2, 1]",
          "3",
          "[2, 1]",
          "[2, 1, 3, 4, 5, 6]",
          "[2, 1]",
          "[3, 4, 5, 6]",
          "[1]",
          "[2, 2, 3, 4, 5, 6]",
          "[2]",
          "[1, 2, 3, 4, 5, 6]",
          "[1, 2]",
          "[1, 2, 3, 3, 3, 3]",
          "5"
        ]
      },


      {
        "text": "Thema Date: Was ist das Ergebnis folgender Eingaben in die JavaScript-Konsole (dargestellt mit js>) ?",
        "answers": [
          {
            "text": "js> x = new Date(2016, 4, 1)",
            "comment": "Intern wird die Anzahl der Millisekunden seit Unix-Geburt gezählt (auch Unix-Epochenzeit genannt), also seit der ersten Stunde am 1.1.1970."
          },
          {
            "text": "js> x.toDateString()",
            "comment": "JavaScript-Monat fängt bei 0 an zu zählen. Also ist 0 = Januar, 1 = Februar, ..."
          },
          {
            "text": "js> x.toISOString()",
            "comment": "Das ist der ISO-Standard der Zeit."
          },
          {
            "text": "js> x.toLocaleDateString()",
            "comment": "Das lokal übliche Format. Lokalisierung geschieht systemweit."
          },
          {
            "text": "js> x.toLocaleFormat(\"%d-%m-%Y\")",
            "comment": "Mit einem Formatstring kann man auch die Darstellung recht frei wählen."
          },
          {
            "text": "js> y = new Date(2016, 4, 2)",
            "comment": "Der Tag danach."
          },
          {
            "text": "js> y-x",
            "comment": "Subtraktion von Date-Objekten führt zur Subtraktion der Millisekunden."
          },
          {
            "text": "js> (y-x)/(24*60*60)",
            "comment": "1 Tag hat 24 Stunden. 1 Stunde hat 60 Minuten. 1 Minute hat 60 Sekunden. 1 Sekunde hat 1000 Millisekunden."
          },
          {
            "text": "js> new Date(1970, 0, 1, 1)",
            "comment": "(new Date(0)) ist der Beginn der Unix-Epochenzeit, also die Stunde Null in Unix."
          }
        ],
        "input": "text",
        "correct": [
          "(new Date(1462053600000))",
          "\"Sun May 01 2016\"",
          "\"2016-04-30T22:00:00.000Z\"",
          "\"01.05.2016\"",
          "\"01-05-2016\"",
          "(new Date(1462140000000))",
          "86400000",
          "1000",
          "(new Date(0))"
        ]
      },
      {
        "text": "Thema Objekte: Was ist das Ergebnis folgender Eingaben in die JavaScript-Konsole (dargestellt mit js>) ?",
        "answers": [
          {
            "text": "js> x = {}",
            "comment": "die einfachste Art, ein neues Objekt zu erstellen"
          },
          {
            "text": "js> x.a = 3",
            "comment": "x bekommt eine neue Eigenschaft (Property) a mit dem Wert 3"
          },
          {
            "text": "js> x.b = 4",
            "comment": "x bekommt eine neue Eigenschaft (Property) b mit dem Wert 4"
          },
          {
            "text": "js> x = { a: 3, b:4 }",
            "comment": "x wird ein neues Objekt zugewiesen mit den Eigenschaften (Properties) a und b mit den Werten 3 und 4."
          },
          {
            "text": "js> x.m = function(){return this.a * this.b}; x.m()",
            "comment": "x bekommt eine neue Eigenschaft (Property) m mit einer Funktion als Wert. Funktionen sind in JavaScript first-class objects. Sie können als Wert auftreten, wo sonst Objekte stehen. Der Aufruf der Funktion geschieht mit ()."
          },
          {
            "text": "js> x.m",
            "comment": "liefert die Funktion, ohne sie auszuführen."
          },
          {
            "text": "js> x.feld = [ 1,2,3 ]",
            "comment": "Array"
          },
          {
            "text": "js> x",
            "comment": "Das gesamte Objekt x wie es bisher aufgebaut wurde"
          },
          {
            "text": "js> x.sum = function(){var sum = 0;for (var i=0;i&lt;this.feld.length;i++){sum += this.feld[i]};return sum}; x.sum()",
            "comment": "Mit this greift man auf sich selbst (auf das Objekt x selbst) zu. Die Summe berechnet man durch Iteration über das eigene Feld."
          },
          {
            "text": "js> x.sum = function(){var sum = 0; this.feld.forEach(function(elem){sum += elem}); return sum}; x.sum()",
            "comment": "forEach erwartet eine Funktion als Parameter. Deren Parameter wiederum ist nacheinander jedes einzelne Element des Feldes."
          },
          {
            "text": "js> x.sum = function(){return this.feld.reduce(function(sum,z){return sum+z})}; x.sum()",
            "comment": "map, reduce sind beliebte Funktoren (Funktionen von Funktionen, also Funktionen zweiter Ordnung) aus der funktionalen Programmierung. Damit geht es noch kürzer."
          },
          {
            "text": "js> x.sum2 = x.sum; x.sum2()",
            "comment": "Es wird ein Alias-Name für die gleiche Funktion vergeben. Funktionen sind in JavaScript first-class objects und können daher einer Variablen zugewiesen werden."
          }
        ],
        "input": "text",
        "correct": [
          "({})",
          "3",
          "4",
          "({a:3, b:4})",
          "12",
          "(function () {return this.a * this.b;})",
          "[1, 2, 3]",
          "({a:3, b:4, m:(function () {return this.a * this.b;}), feld:[1, 2, 3]})",
          "6",
          "6",
          "6",
          "6"
        ]
      },
      {
        "text": "Thema String: Was ist das Ergebnis folgender Eingaben in die JavaScript-Konsole (dargestellt mit js>) ?",
        "answers": [
          {
            "text": "js> \"abc\" === 'abc'",
            "comment": "Apostrophe und Hochkommata sind gleichwertig und werden beide zur Begrenzung von String-Konstanten eingesetzt."
          },
          {
            "text": "js> \"123\".length",
            "comment": "length ist keine Funktion, sondern eine Eigenschaft (Property) des String-Objektes."
          },
          {
            "text": "js> 'cat'.charAt(1)",
            "comment": "liefert das einzelne Zeichen an der zweiten Stelle, auf die man mit dem Index 1 zugreift, weil man bei 0 zu zählen anfängt."
          },
          {
            "text": "js> 'cat'[1]",
            "comment": "liefert das einzelne Zeichen an der zweiten Stelle, auf die man mit dem Index 1 zugreift, weil man bei 0 zu zählen anfängt."
          },
          {
            "text": "js> \"100\" &lt; \"11\"",
            "comment": "Strings werden verglichen mit der lexikographischen Ordnung, nicht mit der numerischen Ordnung."
          },
          {
            "text": "js> \"1\"+\"2\"",
            "comment": "+ ist ein polymorpher Operator und bedeutet bei String Konkatenation statt Addition."
          },
          {
            "text": "js> \"Hallo Welt\".indexOf(\"Welt\")",
            "comment": "The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found."
          },
          {
            "text": "js> \"Der Sinn ist 42\".match(\"42\")",
            "comment": "The match() method retrieves the matches when matching a string against a regular expression. The matches are delivered via an Array containing the entire match result and any parentheses-captured matched results, or null if there were no matches."
          },
          {
            "text": "js> \"1;2;3\".split(\";\")",
            "comment": "The split() method splits a String object into an array of strings by separating the string into substrings."
          },
          {
            "text": "js> \"1;2;3\".split(\";\").join(\",\")",
            "comment": "The join() method joins all elements of an array into a string. x.split(a).join(b) is a replacement of all a in x by b."
          },
          {
            "text": "js> \"1;2;3\".replace(';',',')",
            "comment": "ersetzt nur das erste Vorkommen des Semikolons"
          },
          {
            "text": "js> \"1;2;3\".replace(';',',','g')",
            "comment": "ersetzt alle Vorkommen des Semikolons"
          },
          {
            "text": "js> \"01234\".slice(2,4)",
            "comment": "liefert eine Scheibe (slice) aus dem Gesamtstring zwischen der 2 und 4.Stelle, 2 inklusive, 4 exklusive."
          }
        ],
        "input": "text",
        "correct": [
          "true",
          "3",
          "\"a\"",
          "\"a\"",
          "true",
          "\"12\"",
          "6",
          "[\"42\"]",
          "[\"1\", \"2\", \"3\"]",
          "\"1,2,3\"",
          "\"1,2;3\"",
          "\"1,2,3\"",
          "\"23\""
        ]
      },
      {
        "text": "Was ist das Ergebnis folgender Eingaben in die JavaScript-Konsole (dargestellt mit js>) ?",
        "answers": [
          {
            "text": "js> /b/.test(\"abc\")",
            "comment": ""
          },
          {
            "text": "js> /\\d/.test(\"abc\")",
            "comment": ""
          },
          {
            "text": "js> /\\d/.test(\"123\")",
            "comment": ""
          },
          {
            "text": "js> /\\d/.test(123)",
            "comment": ""
          },
          {
            "text": "js> /\\w/.test(123)",
            "comment": ""
          },
          {
            "text": "js> /\\s/.test(123)",
            "comment": ""
          },
          {
            "text": "js> /name@domain.de/.test(\"email@server.de\")",
            "comment": ""
          },
          {
            "text": "js> /name@domain.de/.test(\"name@domain.de\")",
            "comment": ""
          },
          {
            "text": "js> /\\w+@\\w+\\.(de|org|com)/.test(\"email@server.de\")",
            "comment": ""
          }
        ],
        "input": "checkbox",
        "correct": [0,2,3,4,7,8]
      }

    ]
  },

  "quiz_jquery": {
    "key": "quiz_jquery",
    "title": "Quiz zu jQuery",
    "questions": [
      {
        "text": "Was ist jQuery?",
        "answers": [
          {
            "text": "ein JavaScript-Framework",
            "comment": "Ein Framework ist eine Schicht in der Software-Architektur, die darunter liegende Schichten verbirgt und daher den Programmierstil verändert. Inversion of Control ist ein Merkmal von Frameworks. Alles dies liegt in jQuery nicht vor."
          },
          {
            "text": "eine JavaScript-Library",
            "comment": "Eine Library bietet eine Reihe von Funktionen an, die man nutzen kann oder auch nicht."
          }
        ],
        "input": "checkbox",
        "correct": [1]
      },
      {
        "text": "Gegeben sei folgender HTML-Quelltext: <pre style=\"background-color:#ffffff;color:#000000;font-family:'Menlo';font-size:9,0pt;\">&lt;<span style=\"color:#000080;font-weight:bold;\">script </span>src=<span style=\"color:#008000;font-weight:bold;\">\"https://code.jquery.com/jquery-2.2.3.js\"</span>&gt;&lt;/<span style=\"color:#000080;font-weight:bold;\">script</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">meta </span>charset=<span style=\"color:#008000;font-weight:bold;\">\"UTF-8\"</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">h1</span>&gt;Überschrift&lt;/<span style=\"color:#000080;font-weight:bold;\">h1</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">div </span>id=<span style=\"color:#008000;font-weight:bold;\">\"erstes_kapitel\"</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">h2</span>&gt;Kapitelüberschrift&lt;/<span style=\"color:#000080;font-weight:bold;\">h2</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">p </span>id=<span style=\"color:#008000;font-weight:bold;\">\"erste_einleitung\"</span>&gt;wichtige Einleitung (1)&lt;/<span style=\"color:#000080;font-weight:bold;\">p</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">ul</span>&gt;<br> &lt;<span style=\"color:#000080;font-weight:bold;\">li </span>id=<span style=\"color:#008000;font-weight:bold;\">\"erstens\"</span>&gt;Erstens&lt;/<span style=\"color:#000080;font-weight:bold;\">li</span>&gt;<br> &lt;<span style=\"color:#000080;font-weight:bold;\">li </span>class=<span style=\"color:#008000;font-weight:bold;\">\"even\"</span>&gt;Zweitens&lt;/<span style=\"color:#000080;font-weight:bold;\">li</span>&gt;<br> &lt;<span style=\"color:#000080;font-weight:bold;\">li </span>id=<span style=\"color:#008000;font-weight:bold;\">\"drittens\"</span>&gt;Drittens&lt;/<span style=\"color:#000080;font-weight:bold;\">li</span>&gt;<br> &lt;<span style=\"color:#000080;font-weight:bold;\">li </span>class=<span style=\"color:#008000;font-weight:bold;\">\"even\"</span>&gt;Viertens&lt;/<span style=\"color:#000080;font-weight:bold;\">li</span>&gt;<br>&lt;/<span style=\"color:#000080;font-weight:bold;\">ul</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">p </span>class=<span style=\"color:#008000;font-weight:bold;\">\"fazit\"</span>&gt;Erstes Fazit&lt;/<span style=\"color:#000080;font-weight:bold;\">p</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">p </span>class=<span style=\"color:#008000;font-weight:bold;\">\"fazit\"</span>&gt;Zweites Fazit&lt;/<span style=\"color:#000080;font-weight:bold;\">p</span>&gt;<br>&lt;/<span style=\"color:#000080;font-weight:bold;\">div</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">div </span>id=<span style=\"color:#008000;font-weight:bold;\">\"zweites_kapitel\"</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">h2</span>&gt;Nächstes Kapitel&lt;/<span style=\"color:#000080;font-weight:bold;\">h2</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">p</span>&gt;Noch wichtiger&lt;/<span style=\"color:#000080;font-weight:bold;\">p</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">ol</span>&gt;<br> &lt;<span style=\"color:#000080;font-weight:bold;\">li </span>class=<span style=\"color:#008000;font-weight:bold;\">\"wichtig\"</span>&gt;Erstens&lt;/<span style=\"color:#000080;font-weight:bold;\">li</span>&gt;<br> &lt;<span style=\"color:#000080;font-weight:bold;\">li </span>class=<span style=\"color:#008000;font-weight:bold;\">\"wichtig\"</span>&gt;Zweitens&lt;/<span style=\"color:#000080;font-weight:bold;\">li</span>&gt;<br> &lt;<span style=\"color:#000080;font-weight:bold;\">li </span>class=<span style=\"color:#008000;font-weight:bold;\">\"wichtig\"</span>&gt;Drittens&lt;/<span style=\"color:#000080;font-weight:bold;\">li</span>&gt;<br> &lt;<span style=\"color:#000080;font-weight:bold;\">li </span>class=<span style=\"color:#008000;font-weight:bold;\">\"wichtig\"</span>&gt;Viertens&lt;/<span style=\"color:#000080;font-weight:bold;\">li</span>&gt;<br>&lt;/<span style=\"color:#000080;font-weight:bold;\">ol</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">span </span>class=<span style=\"color:#008000;font-weight:bold;\">\"fazit\"</span>&gt;Drittes Fazit&lt;/<span style=\"color:#000080;font-weight:bold;\">span</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">span </span>class=<span style=\"color:#008000;font-weight:bold;\">\"fazit\"</span>&gt;Viertes Fazit&lt;/<span style=\"color:#000080;font-weight:bold;\">span</span>&gt;<br>&lt;/<span style=\"color:#000080;font-weight:bold;\">div</span>&gt;<br>&lt;<span style=\"color:#000080;font-weight:bold;\">footer</span>&gt;(1)Fußnote&lt;/<span style=\"color:#000080;font-weight:bold;\">footer</span>&gt;</pre><br>Nutzen Sie jQuery-Selektoren, um in JavaScript (mit möglichst wenig JS-Quellcode) folgende Objekte zu ermitteln:",
        "answers": [
          {
            "text": "die Haupt-Überschrift als jQuery-Objekt",
            "comment": "In $('h1') steht $ für jQuery. h1 ist der jQuery-Selektor."
          },
          {
            "text": "den Text der Fußnote",
            "comment": "$('footer') liefert das jQuery-Objekt. $('footer').text() liefert dessen Inhalt."
          },
          {
            "text": "die erste Kapitelüberschrift",
            "comment": "$('h2') liefert alle Kapitelüberschriften und $('h2:first') nur die erste."
          },
          {
            "text": "die Texte in allen Paragraphen hintereinander",
            "comment": "$('p') liefert alle Paragraphen und $('p').text() alle Texte darin."
          },
          {
            "text": "das erste Listenelement im ersten Kapitel",
            "comment": "Das erste Listenelement im ersten Kapitel hat die ID 'erstens'. Daher kann man mit $('li#erstens') darauf zugreifen. Sonst wäre auch $('div#erstes_kapitel li:first') möglich."
          },
          {
            "text": "alle geradzahligen Listenelement im ersten Kapitel",
            "comment": "Die geradzahligen Listenelement im ersten Kapitel haben die Klasse 'even'. Daher kann man mit $('li.even') darauf zugreifen. Der Punkt steht für Klasse. Sonst wäre auch $('div#erstes_kapitel li:odd') möglich, 'odd' deshalb, weil jQuery mit 0 anfängt zu zählen, während die Listenelemente mit 1 beginnend gerendert werden."
          },
          {
            "text": "die Überschrift des zweiten Kapitels",
            "comment": "$('h2') liefert alle h2-Überschriften. $('h2')[1] liefert die zweite, weil jQuery mit 0 anfängt zu zählen. Sonst wäre auch $('div#zweites_kapitel h2') möglich."
          },
          {
            "text": "den Text des Paragraphen zu Beginn des 2. Kapitels",
            "comment": "$('div#zweites_kapitel p').text() konkateniert alle Texte aller Treffer."
          },
          {
            "text": "die Texte aller Kapitelüberschriften hintereinander",
            "comment": "$('h2').text() konkateniert alle Texte aller Treffer."
          },
          {
            "text": "alle wichtigen Listenelemente, d.h. diejenigen, die mit der Klasse 'wichtig' ausgezeichnet sind.",
            "comment": "$('li.wichtig'). Der Punkt steht für Klasse. Also alle li mit der Klasse 'wichtig'."
          },
          {
            "text": "das letzte Listenelement im ersten Kapitel",
            "comment": "$('div#erstes_kapitel li:last'). Mit $('div#erstes_kapitel) kommt man zum ersten Kapitel. Mit li erwischt man alle Listenelemente darunter. Mit :last kann man auf den letzten Treffer zugreifen."
          },
          {
            "text": "alle geradzahligen Listenelemente (2,4) im zweiten Kapitel",
            "comment": "$('div#zweites_kapitel li:odd'). 'odd' deshalb, weil jQuery mit 0 anfängt zu zählen, während die Listenelemente mit 1 beginnend gerendert werden."
          },
          {
            "text": "alle ersten Kindelemente im zweiten Kapitel, egal ob es ein Paragraph oder eine Überschrift oder ein Listenelement handelt",
            "comment": "$('div#zweites_kapitel :first-child')"
          },
          {
            "text": "alle Listenelemente aller Kapitel",
            "comment": "$('li')"
          },
          {
            "text": "alle Überschriften aller Kapitel, egal ob h1, h2, ...",
            "comment": "$(':header')"
          },
          {
            "text": "alle Paragraphen und alle Listenelemente aller Kapitel",
            "comment": "$('p, li'). Komma ist die Oder-Operation in den jQuery-Selektoren."
          },
          {
            "text": "alle direkt folgenden Paragraphen nach ungeordneten Listen (jeweils nur das erste, Next Adjacent Selector)",
            "comment": "$('ul + p'). Plus ist die Folge-Operation in den jQuery-Selektoren."
          },
          {
            "text": "alle span-Bereiche nach geordneten Listen (jeweils mehrere, all sibling elements that follow)",
            "comment": "$('ol ~ span')   Next Siblings Selector (“prev ~ siblings”) Selects all sibling elements that follow after the “prev” element, have the same parent, and match the filtering “siblings” selector."
          },
          {
            "text": "alle Nicht-Listenelemente aus dem zweiten Kapitel",
            "comment": "$('div#zweites_kapitel :not(li)'). :not ist der Negationsoperator in den jQuery-Selektoren. "
          }
        ],
        "input": "text",
        "correct": [
          "$('h1')",
          "$('footer').text()",
          "$('h2:first')",
          "$('p').text()",
          "$('li#erstens')",
          "$('li.even')",
          "$('h2')[1]",
          "$('div#zweites_kapitel p').text()",
          "$('h2').text()",
          "$('li.wichtig')",
          "$('div#erstes_kapitel li:last')",
          "$('div#zweites_kapitel li:odd')",
          "$('div#zweites_kapitel :first-child')",
          "$('li')",
          "$(':header')",
          "$('p, li')",
          "$('ul + p')",
          "$('ol ~ span')",
          "$('div#zweites_kapitel :not(li)')"
        ]
      }
    ]
  },

  "quiz_javascript_the_good_parts": {
    "key": "quiz_javascript_the_good_parts",
    "title": "Quiz The Good Parts",
    "questions": [
      {
        "text": "Was macht Web-Programmierung so schwer?",
        "answers": [
          {
            "text": "die Vielzahl der Browser",
            "comment": "Nein. Die Vielzahl der Browser wäre beherrschbar, wenn sie sich alle an den gleichen Standard halten würden."
          },
          {
            "text": "die unterschiedlichen Bugs in den verschiedenen Browsern",
            "comment": "Da der gleiche Content überall gleich funktionieren soll, müssen die unterschiedlichen Bugs in den verschiedenen Browsern berücksichtigt werden."
          },
          {
            "text": "die alten Browser verschwinden nicht und müssen weiter berücksichtigt werden",
            "comment": "Das gilt insbesondere für die alten Internet Explorer (IE), die auch heute noch Ziel-Plattform für viele Anwendungen sind, obwohl sie bereits Geschichte sind."
          },
          {
            "text": "Auch wenn die Bugs in den Browsern durch neue Releases behoben werden, so verschwinden die Bugs dennoch nicht.",
            "comment": "Die Bugs verschwinden nicht, weil die alten Browser weiter verbreitet bleiben und berücksichtigt werden müssen. Dies verlangen jedenfalls viele Aufträge zu WWW-Software."
          },
          {
            "text": "Die neuen Browser führen zu den alten zusätzliche neue Bugs ein, so dass die Summe der zu berücksichtigen Menge an Bugs stetig ansteigt.",
            "comment": "Je größer die Innovationsrate ist, um so schneller ist der Anstieg der zu berücksichtigen Menge an Bugs."
          }
        ],
        "input": "checkbox",
        "correct": [1,2,3,4]
      },
      {
        "text": "Was fehlt im Programmiermodell des WWW? (What is the 'The Hole'?, see The Theory of the DOM)",
        "answers": [
          {
            "text": "Der Browser war nie als universelle Applikations-Plattform gedacht.",
            "comment": "Das WWW-Modell war zunächst nur verteilte Hypertexte. Programmiert werden sollte nur minimalistisch, also Click-Handler und ein wenig Dynamik."
          },
          {
            "text": "Für Applikationen fehlt eine Komponentenmodell. Modulare Programmierung war nicht vorgesehen. Man kann keine neuen Elemente aus alten zusammen bauen.",
            "comment": "Der Namensraum ist global. Es gibt mittlerweise viele JavaScript-Libraries, die diesen Fehler ausmerzen wollen. Aber der Browser hat immer noch diesen Fehler."
          },
          {
            "text": "Accessability ist in Browsern nicht wirklich beherrschbar.",
            "comment": "Screenreader haben erhebliche Probleme mit komplexen Webseiten. Die WWW-Technologie ist dafür zu bunt und vielfältig, als dass man dafür ein einfaches Accessability-Modell entwickeln könnte. Das 'Accessability für Browser'-Problem ist zu schwer. "
          },
          {
            "text": "Modularität innerhalb von Webseiten fehlt.",
            "comment": "Alle Elemente einer Seite können auf alle anderen Elemente der gleichen Seite zugreifen (bis auf iFrames). Es gibt keinen Schutz, keine modulare Kapselung. Dies ist bei Mashups problematisch. Die iFrame-Lösung ist sehr beschränkt."
          },
          {
            "text": "Das WWW-Modell ist schlechte Informatik, da es Grundprinzipien der Informatik wie Modularität verletzt.",
            "comment": "Das WWW-Modell war gute Informatik für das Ziel und den Zweck, den Tim Berners-Lee gedacht hatte: verteilte Hypertexte. Dass das WWW als universelle Applikations-Plattform global genutzt würde, hat er nicht vorausgesehen und dafür auch keine Konzepte eingebaut. Heute krankt also das WWW an seinem eigenen Erfolg, dass es global für alles eingesetzt wird, auch für Zwecke, für die es nicht vorgesehen war."
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2,3]
      },
      {
        "text": "Was sind die typischen Argumente gegen die Beschränkung der JavaScript-Programmierung auf 'The Good Parts'?",
        "answers": [
          {
            "text": "Ich benötige die vielen Features von JavaScript um mir die Tipparbeit zu sparen.",
            "comment": "Tipparbeit ist noch die wenigste Arbeit bei der Programmierung und sollte keine Entschuldigung für schlechten Programmierstil sein."
          },
          {
            "text": "Guter JavaScript-Programmierstil sei Geschmacksfrage.",
            "comment": "Es gibt auch Geschmacksfragen, aber nicht alle Fragen des JavaScript-Programmierstils sind Geschmacksfragen. "
          },
          {
            "text": "Jedes Feature von JavaScript sei essenziell.",
            "comment": "Viele Features von JavaScript sind nicht essenziell, sondern der Rückwärtskompatibilität geschuldet ('Dont´t break the web!') und man würde sie heute gerne verschwinden lassen, wenn es ginge."
          },
          {
            "text": "Als Programmierer habe ich das Recht, jedes Feature von JavaScript einzusetzen. Das ist mein gutes Recht!",
            "comment": "Wenn dadurch Programme fehlerhaft oder schlecht evolvierbar werden, erlischt das Recht."
          },
          {
            "text": "Ich benötige die Freiheit, alles einzusetzen, was ich will, um mich auszudrücken / kreativ / produktiv zu sein. ",
            "comment": "Die Freiheit kann auch ins Chaos führen. Die freiwillige Selbstbeschränkung ist hier hilfreicher und der Qualität dienlicher."
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2,3,4]
      }
    ]
  },

  "quiz_responsive_performance": {
    "key": "quiz_responsive_performance",
    "title": "Quiz zu Responsive Webdesign – Performance-Tuning",
    "questions": [
      {
        "text": "Wie groß ist heute eine durchschnittliche Webseite?",
        "answers": [
          {
            "text": "4 kB (die durchschnittliche Größe einer DIN A4-Seite mit Text ohne Bilder)",
            "comment": "Da Webseiten aus viel mehr als nur geschriebenem Text bestehen und auch die Berschränkung auf eine DIN A4-Größe nicht besteht, ist die Datenmenge wesentlich größer."
          },
          {
            "text": "im Januar 2015 waren es 1944 kB",
            "comment": "Das ist jedenfalls die Statistik auf httparchive.org/compare.php"
          },
          {
            "text": "im Januar 2013 waren es 1284 kB",
            "comment": "Das ist jedenfalls die Statistik auf httparchive.org/compare.php"
          },
          {
            "text": "Das hängt von den eingesetzten Medien auf der Webseite ab: Bilder, Styles, Scripts, Flash, Audio, Video, usw.",
            "comment": "Die Frage war nach dem Durchschnitt."
          },
          {
            "text": "Das hängt vom Zeitpunkt ab: 2015 waren es 1,9 MB, 2013 waren es noch 1,3 MB.",
            "comment": "Das ist jedenfalls die Statistik auf httparchive.org/compare.php"
          }
        ],
        "input": "checkbox",
        "correct": [1,2,4]
      },
      {
        "text": "Wie testet man die Performance von Webseiten und WebApps?",
        "answers": [
          {
            "text": "in der Netzwerkansicht der Entwicklertools",
            "comment": "Alle modernen Browser haben heute Entwicklertools mit Netzwerkansicht, die sich für das Studium der Performance von Webseiten und WebApps gut eignen."
          },
          {
            "text": "über das HTTP-Protokoll http:// und einem Webserver, nicht durch das direkte Laden aus dem Dateisystem mit file://",
            "comment": "Beim direkte Laden aus dem Dateisystem mit file:// wird das HTTP-Protokoll nicht eingesetzt. Man kann daher nicht wirklich von Webseiten und WebApps sprechen. "
          },
          {
            "text": "indem man zählt, wie viele Dateien auf der Festplatte liegen",
            "comment": "Damit weiß man noch nicht, was bei einem HTTP-Call angefordert und was übertragen wird."
          },
          {
            "text": "indem man das Ladeverhalten in der Netzwerkansicht der Entwicklertools studiert",
            "comment": "In der Netzwerkansicht der Entwicklertools bekommt man viele Informationen über die Performance von Webseiten."
          },
          {
            "text": "durch Emulation langsamer Verbindungen in den Entwicklertools",
            "comment": "Die Entwicklertools bieten die Möglichkeit, langsamere Verbindungen zu emulieren."
          }
        ],
        "input": "checkbox",
        "correct": [0,1,3,4]
      },
      {
        "text": "Welche Optimierungsschritte für Webseiten gibt es?",
        "answers": [
          {
            "text": "Netzwerkanalyse aus den Browser Entwicklertools einsetzen",
            "comment": "Dies ist ein guter erster Schritt zur Analyse der Webperformanz."
          },
          {
            "text": "PageSpeed einsetzen, siehe https://developers.google.com/speed/pagespeed",
            "comment": "PageSpeed Insights analysiert den Inhalt einer Webseite und erstellt dann Vorschläge zur Verbesserung der Geschwindigkeit dieser Seite.(Zitat Pagespeed)"
          },
          {
            "text": "Bilder optimieren",
            "comment": "Image Optimierer und Kompressoren einsetzen, z.B. JPEG-Parameter verändern und auf gerade noch ausreichende JPEG-Qualität verringern."
          },
          {
            "text": "JavaScript- und CSS-Ressourcen, die das Rendering blockieren, in Inhalten \"above the fold\" (ohne Scrollen sichtbar) beseitigen",
            "comment": "Versuchen Sie, blockierende Ressourcen zu verschieben oder asynchron zu laden (Ajax), oder laden Sie kritische Bereiche dieser Ressourcen direkt inline im HTML, solange das zuerst geladene HTML-Fragment unter 14 kB bleibt wegen TCP Slow Start."
          },
          {
            "text": "Browser-Caching nutzen",
            "comment": "Das Festlegen eines Ablaufdatums oder eines Höchstalters in den HTTP-Headern für statische Ressourcen weist den Browser an, zuvor heruntergeladene Ressourcen über die lokale Festplatte anstatt über das Netzwerk zu laden.(Zitat Pagespeed)"
          },
          {
            "text": "JavaScript reduzieren",
            "comment": "Durch die Komprimierung des JavaScript-Codes können viele Datenbytes gespart und das Herunterladen, das Parsen und die Ausführungszeit beschleunigt werden.(Zitat Pagespeed)"
          },
          {
            "text": "Antwortzeit des Servers reduzieren",
            "comment": "Die Antwortzeit Ihres Servers gibt an, wie lange es dauert, den für den Beginn des Renderns der Seite erforderlichen HTML-Code von Ihrem Server zu laden. Dabei wird die Netzwerklatenz zwischen Google und Ihrem Server berücksichtigt. Die einzelnen Messergebnisse können variieren, aber die Unterschiede sollten nicht sehr groß sein. Große Abweichungen der Server-Antwortzeit deuten unter Umständen auf ein Leistungsproblem hin.(Zitat Pagespeed)"
          },
          {
            "text": "CSS reduzieren",
            "comment": "Durch das Reduzieren von Ressourcen werden unnötige Byte entfernt, die z. B. aus zusätzlichen Leerzeichen, Zeilenumbrüchen und Einzügen resultieren. Bei Verkürzung der HTML-, CSS- und JavaScript-Codes können diese schneller heruntergeladen, geparst und ausgeführt werden. Außerdem kann für CSS- und JavaScript-Code die Dateigröße durch das Umbenennen von Variablen verringert werden, sofern der HTML-Code so aktualisiert wird, dass die Selektoren weiterhin funktionieren.(Zitat Pagespeed)"
          },
          {
            "text": "HTML reduzieren",
            "comment": "Durch das Reduzieren von Ressourcen werden unnötige Byte entfernt, die z. B. aus zusätzlichen Leerzeichen, Zeilenumbrüchen und Einzügen resultieren. Bei Verkürzung der HTML-, CSS- und JavaScript-Codes können diese schneller heruntergeladen, geparst und ausgeführt werden. Außerdem kann für CSS- und JavaScript-Code die Dateigröße durch das Umbenennen von Variablen verringert werden, sofern der HTML-Code so aktualisiert wird, dass die Selektoren weiterhin funktionieren.(Zitat Pagespeed)"
          },
          {
            "text": "Komprimierung aktivieren",
            "comment": "Durch die Komprimierung der Ressourcen mit \"gzip\" oder \"deflate\" kann die Anzahl der über das Netzwerk gesendeten Bytes reduziert werden.(Zitat Pagespeed)"
          },
          {
            "text": "Sichtbare Inhalte priorisieren",
            "comment": "Die Inhalte \"above the fold\" (ohne Scrollen sichtbar) schneller liefern als die anderen Inhalte."
          },
          {
            "text": "Zielseiten-Weiterleitungen vermeiden",
            "comment": "keine Umleitungen verwenden"
          },
          {
            "text": "Optimale Größe von Links oder Schaltflächen auf Mobilgeräten einhalten",
            "comment": "Kleine oder dicht beieinander liegende Links und Schaltflächen lassen sich von Nutzern auf einem Touchscreen schwieriger betätigen als bei Verwendung eines herkömmlichen Mauszeigers. Um Nutzer nicht dadurch zu frustrieren, dass sie versehentlich auf die falschen Ziele tippen, sollten diese groß genug sein und weit genug auseinander liegen, sodass ein Nutzer auf sie tippen kann, ohne gleichzeitig andere Links oder Schaltflächen zu berühren. Die Fingerspitzen eines Erwachsenen sind durchschnittlich etwa 10 mm breit. In den Richtlinien für Android-Benutzeroberflächen wird für Links oder Schaltflächen auf Mobilgeräten eine Mindestgröße von etwa 7 mm bzw. 48 CSS-Pixeln auf einer Website mit korrekt festgelegtem Darstellungsbereich für Mobilgeräte empfohlen. (Zitat Pagespeed)"
          },
          {
            "text": "Anpassung von Inhalten auf einen Darstellungsbereich",
            "comment": "Nutzer sind sowohl auf Desktop-Computern als auch auf Mobilgeräten das vertikale Scrollen auf Websites gewohnt, nicht aber das horizontale Scrollen. Deshalb ist es nicht sehr nutzerfreundlich, wenn Nutzer horizontal scrollen oder herauszoomen müssen, um die ganze Seite zu sehen. (Zitat Pagespeed)"
          },
          {
            "text": "Darstellungsbereich konfigurieren",
            "comment": "Ein Darstellungsbereich bestimmt, wie eine Webseite auf einem Mobilgerät angezeigt wird. Wenn kein Darstellungsbereich vorhanden ist, rendern Mobilgeräte die Seite mit einer typischen Desktop-Bildschirmbreite, die an den Bildschirm angepasst wird. Mithilfe eines Darstellungsbereichs können Sie die Seitenbreite festlegen und auf verschiedenen Geräten skalieren. (Zitat Pagespeed)"
          },
          {
            "text": "Lesbare Schriftgrößen verwenden",
            "comment": "Konfigurieren Sie zuerst einen Darstellungsbereich, damit Schriftarten auf verschiedenen Geräten erwartungsgemäß skaliert werden. Setzen Sie nach dem Konfigurieren des Darstellungsbereichs die folgenden zusätzlichen Empfehlungen um: Verwenden Sie eine Basisschriftgröße von 16 CSS-Pixeln. Passen Sie die Größe bei Bedarf an, je nach den Eigenschaften der verwendeten Schriftart. Verwenden Sie Größen relativ zur Basisgröße, um den typografischen Maßstab zu definieren. Text erfordert senkrechten Abstand zwischen den Zeichen und muss gegebenenfalls für jede Schriftart angepasst werden. In den meisten Fällen empfiehlt es sich, die Standardzeilenhöhe des Browsers von 1,2 em zu verwenden. Die Verwendung zu vieler Schriftarten und Schriftgrößen hat ein unübersichtliches und übermäßig komplexes Seitenlayout zur Folge. (Zitat Pagespeed)"
          },
          {
            "text": "Plug-ins vermeiden",
            "comment": "Plug-ins können die Nutzung von Inhalten auf vielen Plattformen verhindern. Plug-ins helfen dem Browser bei der Verarbeitung spezieller Arten von Web-Inhalten, wie z. B. Flash, Silverlight und Java. Die meisten Mobilgeräte unterstützen keine Plug-ins. Plug-ins sind eine der Hauptursachen für Abstürze und Sicherheitsverletzungen in unterstützenden Browsern. Aufgrund dieser Risiken werden Plug-ins von vielen Desktopbrowsern eingeschränkt. (Zitat Pagespeed)"
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
      },
      {
        "text": "Für welchen Zweck wählt man welches Bildformat?",
        "answers": [
          {
            "text": "WAV für Waffel-Komprimierung hochwertiger Bilder",
            "comment": "WAV ist ein Audioformat."
          },
          {
            "text": "JPEG für komprimierte Fotos",
            "comment": "JPEG schlägt verschiedene Komprimierungs- und Kodierungsmethoden vor, darunter verlustbehaftete und verlustfreie Kompression, verschiedene Farbtiefen sowie sequenzielle oder progressive Modi (normaler Bildaufbau bzw. allmähliche Verfeinerung). Das JPEG File Interchange Format (JFIF) ist ein 1991 von Eric Hamilton entwickeltes Grafikformat zur Speicherung von Bildern, die nach der JPEG-Norm komprimiert wurden. Die JPEG-Norm legt nur den Komprimierungsvorgang fest. JPEG legt nicht fest, welcher Farbraum benutzt werden soll. Die Größe von JPEG-Bildern ist bei JFIF auf 65.535×65.535 Pixel beschränkt. (Zitat Wikipedia)"
          },
          {
            "text": "GIF für Bilder mit geringer Farbtiefe, Logos und Icons und Bilder mit Animationen",
            "comment": "Das Graphics Interchange Format, kurz GIF, ist ein Grafikformat für Bilder mit Farbpalette (Farbtabelle mit max. 256 Farben, inkl. einer „Transparenzfarbe“). Es erlaubt eine verlustfreie Kompression der Bilder. Darüber hinaus können mehrere (übereinanderliegende) Einzelbilder in einer Datei abgespeichert werden, die von geeigneten Betrachtungsprogrammen wie Webbrowsern als Animationen interpretiert werden. (Zitat Wikipedia)"
          },
          {
            "text": "PNG sowohl für Fotos als auch Grafiken, jedoch ohne Animationen",
            "comment": "Portable Network Graphics (PNG) ist ein universelles, vom World Wide Web Consortium (W3C) anerkanntes Grafikformat für Rastergrafiken mit verlustfreier Kompression. Es wurde als freier Ersatz für das ältere, bis zum Jahr 2006 mit Patentforderungen belastete Graphics Interchange Format (GIF) entworfen. PNG unterstützt neben unterschiedlichen Farbtiefen auch Transparenz per Alphakanal. PNG ist das meistverwendete verlustfreie Grafikformat im Internet. Es gibt PNG-8 und PNG-24. PNG-8 ist wie GIF auf 256 Farben beschränkt. PNG-24 hat dagegen eine 24-Bit-Farbtiefe. (Zitat Wikipedia)"
          },
          {
            "text": "MP4 für Medien-Port der 4. Generation",
            "comment": "MP4 ist ein Video-Format"
          },
          {
            "text": "MOV",
            "comment": "MOV ist das Quicktime-Format für Video."
          },
          {
            "text": "SVG für skalierbare Vektorgrafik",
            "comment": "Scalable Vector Graphics (SVG) ist die vom World Wide Web Consortium (W3C) empfohlene Spezifikation zur Beschreibung zweidimensionaler Vektorgrafiken. SVG, das auf XML basiert, wurde erstmals im September 2001 veröffentlicht. Einige der gebräuchlichsten Webbrowser können ohne nachträgliche Installation von Erweiterungen einen Großteil des Sprachumfangs darstellen. Animationen werden von SVG mittels SMIL unterstützt. Manipulationen des SVG-DOM sind mit Hilfe eingebetteter Funktionen via Skriptsprachen möglich. Da SVG ein XML-basiertes Dateiformat ist, sind Inhalte von SVG-Dateien für computerunterstützte Übersetzung und andere Weiterverarbeitungen leicht zugänglich. Sie können prinzipiell auch direkt mit einem Texteditor bearbeitet werden. (Zitat Wikipedia)"
          }
        ],
        "input": "checkbox",
        "correct": [1,2,3,6]
      }
    ]
  },

  "ccm": {
    "key": "ccm",
    "title": "Quizz: Was ist <i>ccm</i>?",
    "questions": [
      {
        "text": "Was bedeutet <i>ccm</i>?",
        "answers": [
          {
            "text": "<i>ccm</i> steht für <b>C</b>ORBA <b>C</b>omponent <b>M</b>odel"
          },
          {
            "text": "<i>ccm</i> steht für <b>c</b>lient <b>c</b>omponent <b>m</b>odel"
          },
          {
            "text": "<i>ccm</i> steht für <b>c</b>lientside <b>c</b>omponent <b>m</b>odel",
            "comment": "Bedeutet übersetzt also clientseitiges Komponentenmodell"
          }
        ],
        "input": "radio",
        "correct": 2
      },
      {
        "text": "Was bringt <i>ccm</i>?",
        "answers": [
          {
            "text": "Komponentenmodell für die Umsetzung von Web-Komponenten",
            "comment": "Sogenannte <i>ccm</i>-Komponenten"
          },
          {
            "text": "Formale Spezifikation eines Komponentenmodells",
            "comment": "Beim <i>ccm</i> handelt es sich um die konkrete Realisierung eines Komponentenmodells."
          },
          {
            "text": "Daraus resultierende Komponenten sind cross-domain einbindbar.",
            "comment": "Daher auch von Servern anderer Domänen."
          },
          {
            "text": "Daraus resultierende Komponenten sind über reine HTML-Tags ohne JavaScript einbindbar.",
            "comment": "Das bringen erst die kommenden neuen Web-Standards für Web-Komponenten mit sich."
          },
          {
            "text": "Daraus resultierende Komponenten sind on-demand einbindbar.",
            "comment": "Daher nicht nur beim Neuladen einer Webseite, sondern jederzeit auch im Nachhinein."
          }
        ],
        "input": "checkbox",
        "correct": [ true, false, true, false, true ]
      },
      {
        "text": "Was kann mit <i>ccm</i>-Komponenten realisiert werden?",
        "answers": [
          "Statische Inhalte",
          "Komplexe Webanwendungen",
          "Interaktive Webanwendungen",
          "Mobile Web-Apps",
          "Webanwendungen mit Offline-Funktionalität",
          "Echtzeitfähige Webanwendungen",
          "Rich Internet Apllications (RIA)",
          "Singe Page Applications (SPA)",
          {
            "text": "Alles mit HTML, CSS und JavaScript umsetzbare",
            "comment": "Da JavaScript inzwischen auch serverseitig zum Einsatz kommt (Stichwort: NodeJS), muss es genaugenommen \"alles clientseitig umsetzbare\" heißen."
          }
        ],
        "input": "checkbox",
        "correct": [ true, true, true, true, true, true, true, true, true ]
      },
      {
        "text": "Eine in Form einer <i>ccm</i>-Komponente realisierte Webanwendung...",
        "answers": [
          {
            "text": "kann mittels iFrame in beliebige Webseiten eingebettet werden.",
            "comment": "Die Einbettung erfolgt nicht über iFrames."
          },
          "kann in einen Webseitenbereich einer beliebigen im Browser geöffneten Webseite (z.B. tagesschau.de oder google.de) nachträglich eingebettet werden.",
          "kann mehrfach konfliktfrei in die selbe Webseite eingebettet werden."
        ],
        "input": "checkbox",
        "correct": [ false, true, true ]
      },
      {
        "text": "Eine in Form einer <i>ccm</i>-Komponente realisierte Webanwendung...",
        "answers": [
          "kann mit anderen <i>ccm</i>-Komponenten innerhalb der selben Webseite kommunizieren.",
          "kann Daten in Echtzeit mit allen Webseiten austauschen, in denen die selbe <i>ccm</i>-Komponente eingettet ist.",
          {
            "text": "kann mit anderen <i>ccm</i>-Komponenten die in anderen Webseiten eingebettet sind direkt kommunizieren.",
            "comment": "Nicht direkt, aber indirekt durch die Nutzung des selben <i>ccm</i>-Datenspeichers."
          }
        ],
        "input": "checkbox",
        "correct": [ true, true, false ]
      },
      {
        "text": "Eine in Form einer <i>ccm</i>-Komponente realisierte Webanwendung...",
        "answers": [
          "kann ihre Inhalte an die Größe des Webseitenbereichs in den sie eingebettet wird dynamisch anpassen.",
          "kann ihre Inhalte an ein bestehendes Corporate Design einer Webseite anpassen.",
          "Die Webseite kann die von der Webanwendung eingebetteten Inhalte an ihr Corporate Design anpassen."
        ],
        "input": "checkbox",
        "correct": [ true, true, true ]
      },
      {
        "text": "Eine <i>ccm</i>-Komponente...",
        "answers": [
          {
            "text": "besteht aus mehreren JavaScript-Dateien",
            "comment": "Nur eine einzige kleine JavaScript-Datei (unter 100KB, weniger als 1000 Zeilen)."
          },
          "kann sich aus mehreren Komponenten zusammensetzen.",
          {
            "text": "kann schnell komplex werden.",
            "comment": "Geringe Komplexität durch Modularität. Eine Komponente implementiert selbst immer nur das, was nicht durch Komposition bereits abgedeckt werden kann."
          },
          {
            "text": "wird im Idealfall von genau einer Person entwickelt.",
            "comment": "Wegen geringer Komplexität und hoher Qualität durch starke Bindung zwischen Entwickler und Komponente."
          }
        ],
        "input": "checkbox",
        "correct": [ false, true, false, true ]
      },
      {
        "text": "Welche technischen Voraussetzungen erfordert die Nutzung von <i>ccm</i>?",
        "answers": [
          {
            "text": "Einen beliebigen Webbrowser",
            "comment": "Vorrausetzung ist ein \"moderner\" Webbrowser."
          },
          "Aktiviertes JavaScript",
          "Bestimmtes Browser-PlugIn",
          {
            "text": "HTML5 und CSS3",
            "comment": "<i>ccm</i> funktioniert auch mit älteren Versionen von HTML und CSS."
          }
        ],
        "input": "checkbox",
        "correct": [ 1 ]
      }
    ]
  },


  "phase_3_intro": {
    "key": "phase_3_intro",
    "title": "Quiz zur Einführung in Phase 3",
    "questions": [
      {
        "text": "Sind HTML, CSS oder JavaScript modular?",
        "answers": [
          {
            "text": "Ja",
            "comment": "HTML ist nicht modular. In HTML kann man keine geschachteleten Namensräume bilden (bis auf iFrame), keine Abstraktionen bauen und keine Wiederholungen durch eigene HTML-Konzepte eliminieren. CSS ist nicht modular. In CSS kann man keine geschachteleten Namensräume bilden, keine Abstraktionen bauen und keine Wiederholungen durch eigene CSS-Konzepte eliminieren."
          },
          {
            "text": "Nur HTML ist modular",
            "comment": "HTML ist nicht modular. In HTML kann man keine geschachteleten Namensräume bilden (bis auf iFrame), keine Abstraktionen bauen und keine Wiederholungen durch eigene HTML-Konzepte eliminieren."
          },
          {
            "text": "Nur CSS ist modular",
            "comment": "CSS ist nicht modular. In CSS kann man keine geschachteleten Namensräume bilden, keine Abstraktionen bauen und keine Wiederholungen durch eigene CSS-Konzepte eliminieren."
          },
          {
            "text": "Nur JavaScript ist modular",
            "comment": "JavaScript ist nicht modular, da es mit einem globalen Namensraum (im Browser das Objekt 'window') arbeitet. Zwar kann man mittels function einen geschachteleten Namensraum erzeugen. Das heißt aber lediglich, dass JavaScript die Sprachmittel besitzt, um Module zu spezifizieren. Funktionen realisieren nur das Funktionskonzept von Programmiersprachen und noch keine vollwertigen Module."
          },
          {
            "text": "Nein",
            "comment": "HTML, CSS und JavaScript sind nicht modular und verletzten damit ein Grundprinzip der Informatik, das der Modularität."
          }
        ],
        "input": "radio",
        "correct": [4]
      },
      {
        "text": "Wann wurde das Modulkonzept in JavaScript durch einen Standard eingeführt?",
        "answers": [
          {
            "text": "2008 durch JavaScript 2008",
            "comment": "2008 wurde das Modulkonzept zwar in ECMAScript 4 eingebracht, aber ECMAScript 4 hat nie das Licht der Welt erblickt. Es kam zu einem Konflikt im Standardisierungskommittee TC39 und ECMAScript 4 wurde nie zum Standard erhoben, siehe https://en.wikipedia.org/wiki/ECMAScript"
          },
          {
            "text": "2008 durch ECMAScript 4",
            "comment": "2008 wurde das Modulkonzept zwar in ECMAScript 4 eingebracht, aber ECMAScript 4 hat nie das Licht der Welt erblickt. Es kam zu einem Konflikt im Standardisierungskommittee TC39 und ECMAScript 4 wurde nie zum Standard erhoben, siehe https://en.wikipedia.org/wiki/ECMAScript"
          },
          {
            "text": "2009 durch ES5",
            "comment": "On December 3, 2009, ECMA-262 5th edition was published. But it did not include any module concept. Yahoo, Microsoft, Google, and other 4th edition dissenters formed their own subcommittee to design a less ambitious update of ECMAScript 3, tentatively named ECMAScript 3.1. This edition would focus on security and library updates with a large emphasis on compatibility. see https://en.wikipedia.org/wiki/ECMAScript"
          },
          {
            "text": "2015 durch ES6",
            "comment": "ES6 ist nur ein anderer Name für ECMAScript 6"
          },
          {
            "text": "2015 durch ECMAScript 6",
            "comment": "Ja, siehe https://en.wikipedia.org/wiki/ECMAScript und http://es6-features.org/: Zitat: 'The Sixth Edition adds significant new syntax for writing complex applications, including classes and modules.'"
          },
          {
            "text": "2015 durch JavaScript 2015",
            "comment": "JavaScript 2015 ist nur ein anderer Name für ECMAScript 6"
          }
        ],
        "input": "checkbox",
        "correct": [3,4,5]
      },
      {
        "text": "Seit wann arbeitet das WWW Consortium W3C an der 'Web Components Specification'?",
        "answers": [
          {
            "text": "seit 1996",
            "comment": "siehe http://w3c.github.io/webcomponents/"
          },
          {
            "text": "seit 2000",
            "comment": "siehe http://w3c.github.io/webcomponents/"
          },
          {
            "text": "seit 2008",
            "comment": "siehe http://w3c.github.io/webcomponents/"
          },
          {
            "text": "seit 2009",
            "comment": "siehe http://w3c.github.io/webcomponents/"
          },
          {
            "text": "seit 2011",
            "comment": "siehe http://w3c.github.io/webcomponents/"
          },
          {
            "text": "seit 2015",
            "comment": "siehe http://w3c.github.io/webcomponents/"
          }
        ],
        "input": "radio",
        "correct": [4]
      },
      {
        "text": "Was sind die großen Projekte der Browser-Hersteller für die Realisierung von Web-Komponenten?",
        "answers": [
          {
            "text": "polymer",
            "comment": "Google https://www.polymer-project.org/"
          },
          {
            "text": "x-tag",
            "comment": "Microsoft supports x-tag http://x-tag.github.io/"
          }
        ],
        "input": "checkbox",
        "correct": [0,1]
      },
      {
        "text": "Welche Browser unterstützen heute (2016) Web-Komponenten?",
        "answers": [
          {
            "text": "MS Internet Explorer",
            "comment": "MS switched to Edge for implementing advanced features."
          },
          {
            "text": "MS Edge",
            "comment": "still open question, whether MS will implement Web Components into Edge"
          },
          {
            "text": "Apple Safari",
            "comment": "No active development in HTML Import. Custom Element and Shadow DOM only prototypical or in some developer builds ('Nightly Builds')."
          },
          {
            "text": "Mozilla Firefox",
            "comment": "HTML Import is on hold"
          },
          {
            "text": "Google Chrome",
            "comment": "stable"
          },
          {
            "text": "Opera",
            "comment": "stable"
          }
        ],
        "input": "checkbox",
        "correct": [4,5]
      }
    ]
  },


  "phase_3_grundlagen_prinzipien": {
    "key": "phase_3_grundlagen_prinzipien",
    "title": "Grundlagen und Prinzipien für verteilte Web-Komponenten",
    "questions": [
      {
        "text": "Sind Webseiten wie Buchseiten?",
        "answers": [
          {
            "text": "generell Ja",
            "comment": "So ein uneingeschränktes Ja kann man nicht sagen. Das WWW besteht aus mehr als Texten mit Bildern."
          },
          {
            "text": "Ja, damals hätte Tim Berners-Lee gesagt: fast",
            "comment": "Tim Berners-Lee hätte damals gesagt: Ja, fast: Das WWW besteht aus Texten mit Bildern und Hyperlinks für Querverweise."
          },
          {
            "text": "Ja, damit User mit ihrer positiven Usability-Erfahrung von Büchern mit der gleichen Unbefangenheit ohne Nutzungsbarrieren ins WWW gehen.",
            "comment": "Niedrige Nutzungsbarrieren sind ein starker Akzeptanztreiber. Man würde als Interface-Paradigma gerne die Illusion der Einfachheit des Buches aufrecht erhalten. Für einen naiven Benutzer darf es nicht schwerer sein, im WWW zu browsen als in einem Buch zu lesen."
          },
          {
            "text": "Heute Nein. Das WWW ist heute viel, viel mehr.",
            "comment": "Das WWW ist viel, viel mehr und mit der simplen Struktur eines Buches, auch eines Hypertextes, nicht mehr vergleichbar. Heute, also 20 Jahre später, wandelt sich das WWW von einer Hypertext-Plattform zu einer universellen Applikations-Plattform mit Software in JavaScript, die bei Bedarf geladen wird und so in die Hypertexte verwoben ist, dass man als Endbenutzer nichts davon merkt."
          },
          {
            "text": "generell Nein",
            "comment": "So ein uneingeschränktes Nein kann man nicht sagen. Man würde als Interface-Paradigma gerne die Illusion der Einfachheit des Buches aufrecht erhalten. Für einen naiven Benutzer darf es nicht schwerer sein, im WWW zu browsen als in einem Buch zu lesen."
          }
        ],
        "input": "checkbox",
        "correct": [1,2,3]
      },
      {
        "text": "Was ist Ajax?",
        "answers": [
          {
            "text": "Asynchronous JavaScript and XML",
            "comment": "Asynchronous JavaScript and XML war der ursprüngliche Name von Jesse James Garrett, weil das damals die Hauptanwendung war. Es ist aber auch Synchrones JavaScript erlaubt. Als Datenformat ist alles erlaubt, nicht nur XML, z.B. TXT, JSON, CSV,..."
          },
          {
            "text": "Ajax erlaubt nur XML. JSON ist verboten.",
            "comment": "Asynchronous JavaScript and XML war der ursprüngliche Name von Jesse James Garrett, weil das damals die Hauptanwendung war. Als Datenformat ist alles erlaubt, nicht nur XML, z.B. TXT, JSON, CSV,... Letztes Endes geht es um alles, was das XMLHttpRequest-Objekt in der JavaScript-Engine alles kann."
          },
          {
            "text": "ein Konzept zur synchronen und asynchronen Datenübertragung zwischen einem Browser und Servern",
            "comment": "Synchrone Datenübertragung ist auch erlaubt. Asynchronous JavaScript and XML war der ursprüngliche Name von Jesse James Garrett, weil das damals die Hauptanwendung war."
          },
          {
            "text": "Ajax ermöglicht es, im Hintergrund Anfragen durchzuführen, während eine HTML-Seite angezeigt wird, und die Seite mittels JavaScript zu verändern, ohne sie komplett neu zu laden.",
            "comment": "Das ist der sichtbare Effekt von Ajax und dieser erhöht die Usability von WebApps erheblich: Endlich kein Warten mehr. Endlich kein Einfrieren der WebApp mehr."
          },
          {
            "text": "Ajax ist ein Konzept zur asynchronen Datenübertragung zwischen einem Browser und Servern. Synchrone Datenübertragung ist nicht erlaubt.",
            "comment": "Synchrone Datenübertragung ist auch erlaubt. Letztes Endes geht es um alles, was das XMLHttpRequest-Objekt in der JavaScript-Engine alles kann, und das umfasst auch synchrone Datenübertragung und alle Datenformate, z.B. TXT, JSON, CSV,..."
          },
          {
            "text": "Bei Ajax ist nur http erlaubt.",
            "comment": "Ajax erlaubt jedes IP- und Anwendungs-Protokoll, also auch tcp, udp, http, https, ws, wss, xmpp, ..."
          }
        ],
        "input": "checkbox",
        "correct": [0,2,3]
      },
      {
        "text": "Was ist JSON?",
        "answers": [
          {
            "text": "JavaScript Object Notation",
            "comment": "Die JavaScript Object Notation, kurz JSON, ist ein kompaktes Datenformat in einer einfach lesbaren Textform zum Zweck des Datenaustauschs zwischen Anwendungen. Jedes gültige JSON-Dokument soll ein gültiges JavaScript sein und per eval() interpretiert werden können, siehe https://de.wikipedia.org/wiki/JavaScript_Object_Notation und http://www.json.org/"
          },
          {
            "text": "Jedes Javascript-Objekt ist JSON.",
            "comment": "Jedes Javascript-Objekt ohne Funktionen, RegExp, Error, undefined, NaN, Infinity und -Infinity kann in JSON serialisiert werden, aber es ist selbst noch kein JSON, siehe https://de.wikipedia.org/wiki/JavaScript_Object_Notation und http://www.json.org/"
          },
          {
            "text": "Jedes Javascript-Array ist JSON.",
            "comment": "Jedes Javascript-Array ohne Funktionen, RegExp, Error, undefined, NaN, Infinity und -Infinity kann in JSON serialisiert werden, aber es ist selbst noch kein JSON, siehe https://de.wikipedia.org/wiki/JavaScript_Object_Notation und http://www.json.org/"
          },
          {
            "text": "{} ist korrektes JSON.",
            "comment": "http://jsonlint.com/"
          },
          {
            "text": "[] ist korrektes JSON.",
            "comment": "http://jsonlint.com/"
          },
          {
            "text": "[{}] ist korrektes JSON.",
            "comment": "http://jsonlint.com/"
          },
          {
            "text": "{[]} ist korrektes JSON.",
            "comment": "http://jsonlint.com/"
          }
        ],
        "input": "checkbox",
        "correct": [0,3,4,5,6]
      },
      {
        "text": "Was ist SOP?",
        "answers": [
          {
            "text": "Die Same-Origin-Policy (SOP) ist ein Sicherheitskonzept.",
            "comment": "Die Same-Origin-Policy (SOP) ist ein Sicherheitskonzept, das clientseitigen Skriptsprachen wie JavaScript und ActionScript, aber auch Cascading Style Sheets untersagt, auf Objekte (zum Beispiel Grafiken) zuzugreifen, die von einer anderen Webseite stammen oder deren Speicherort nicht der Origin entspricht. Sie stellt ein wesentliches Sicherheitselement in allen modernen Browsern und Webanwendungen zum Schutz vor Angriffen dar. siehe https://de.wikipedia.org/wiki/Same-Origin-Policy"
          },
          {
            "text": "SOP (ursprünglich für Simple Access Protocol) ist ein Netzwerkprotokoll, mit dessen Hilfe Daten zwischen Systemen ausgetauscht und Remote Procedure Calls durchgeführt werden können. SOP ist ein industrieller Standard des World Wide Web Consortiums (W3C).",
            "comment": "Das ist SOAP. SOAP ist das Simple Object Access Protocol. SOAP stützt sich auf XML zur Repräsentation der Daten."
          }
        ],
        "input": "checkbox",
        "correct": [0]
      },
      {
        "text": "Was ist JSONP?",
        "answers": [
          {
            "text": "JSONP ist das JSON Primärformat",
            "comment": "JSONP (JSON mit Padding) ermöglicht die Übertragung von (JSON-)Daten über Domaingrenzen hinweg."
          },
          {
            "text": "JSONP ist JSON mit Padding",
            "comment": "JSONP (JSON mit Padding) ermöglicht die Übertragung von (JSON-)Daten über Domaingrenzen hinweg. Üblicherweise erfolgen Ajax-Datenabfragen an Server über das XMLHttpRequest-Objekt eines Webbrowsers. Aufgrund der Same-Origin-Policy funktioniert das nicht, wenn die in einem Webbrowser angezeigte Webseite über dieses Objekt auf einen Server zuzugreifen versucht, der in einer anderen Domain als die angezeigte Webseite liegt. Das Problem kann durch JSONP umgangen werden. siehe https://de.wikipedia.org/wiki/JavaScript_Object_Notation"
          },
          {
            "text": "JSONP ist JSON mit Pudding",
            "comment": "also wirklich! ;-)"
          },
          {
            "text": "JSONP ist eine Technik, die Same Origin Policy (SOP) zu umgehen.",
            "comment": "Die Same Origin Policy (SOP) verbietet die Übertragung von JSON-Daten über Domänengrenzen hinweg. Mit JSONP werden die Daten in einem Funktionsaufruf verpackt, durch ein &lt;script>-Tag wird der Funktionsaufruf geladen und ausgeführt. Dies setzt voraus, dass die Funktion bereits in der Mutter-Webseite definiert ist. Auf dieser Gleichheit des Namens der Funktion beim Aufruf und bei der Deklaration beruht die Sicherheit von JSONP."
          },
          {
            "text": "JSONP ist ein spezieller Ajax-Call.",
            "comment": "Bei JSONP muss man im Ajax-Call dataType: 'jsonp' angeben."
          }
        ],
        "input": "checkbox",
        "correct": [1,3,4]
      },

      {
        "text": "Was ist eine Sandbox?",
        "answers": [
          {
            "text": "Sandkasten",
            "comment": "Sandbox ist die englischsprachige Bezeichnung für Sandkasten und bezeichnet allgemein einen isolierten Bereich, innerhalb dessen jede Maßnahme keinerlei Auswirkung auf die äußere Umgebung hat."
          },
          {
            "text": "Sandkiste",
            "comment": "Sandbox ist die englischsprachige Bezeichnung für Sandkiste und bezeichnet allgemein einen isolierten Bereich, innerhalb dessen jede Maßnahme keinerlei Auswirkung auf die äußere Umgebung hat."
          },
          {
            "text": "isolierter Bereich",
            "comment": "Sandbox bezeichnet allgemein einen isolierten Bereich, innerhalb dessen jede Maßnahme keinerlei Auswirkung auf die äußere Umgebung hat."
          },
          {
            "text": "Abschirmung gegen außen",
            "comment": "Sandbox bezeichnet allgemein eine Abschirmung eines eingegrenzten Bereiches gegen außen, innerhalb derer jede Maßnahme keinerlei Auswirkung auf die äußere Umgebung hat."
          },
          {
            "text": "Sicherheitszone mit sehr eingeschränkten Zugriffsmöglichkeiten",
            "comment": "Sandbox bezeichnet allgemein eine Sicherheitszone mit sehr eingeschränkten Zugriffsmöglichkeiten. Wikipedia: 'In computer security, a sandbox is a security mechanism for separating running programs. It is often used to execute untested code, or untrusted programs from unverified third parties, suppliers, untrusted users and untrusted websites.[1] A sandbox typically provides a tightly controlled set of resources for guest programs to run in, such as scratch space on disk and memory. Network access, the ability to inspect the host system or read from input devices are usually disallowed or heavily restricted.' see https://en.wikipedia.org/wiki/Sandbox_(computer_security)"
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2,3,4]
      },
      {
        "text": "Woraus besteht der ccm-Technologie-Stack?",
        "answers": [
          {
            "text": "Browser",
            "comment": "Webbrowser oder allgemein auch Browser (engl. [ˈbɹaʊ̯zə(ɹ)], to browse, ‚stöbern, schmökern, umsehen‘, auch ‚abgrasen‘) sind spezielle Computerprogramme zur Darstellung von Webseiten im World Wide Web oder allgemein von Dokumenten und Daten. Das Durchstöbern des World Wide Webs beziehungsweise das aufeinanderfolgende Abrufen beliebiger Hyperlinks als Verbindung zwischen Webseiten mit Hilfe solch eines Programms wird auch als Internetsurfen bezeichnet. Neben HTML-Seiten können Webbrowser verschiedene andere Arten von Dokumenten wie zum Beispiel Bilder und PDF-Dokumente anzeigen. Webbrowser stellen die Benutzeroberfläche für Webanwendungen dar. siehe https://de.wikipedia.org/wiki/Webbrowser"
          },
          {
            "text": "HTML",
            "comment": "Die Hypertext Markup Language (engl. für Hypertext-Auszeichnungssprache), abgekürzt HTML, ist eine textbasierte Auszeichnungssprache zur Strukturierung digitaler Dokumente wie Texte mit Hyperlinks, Bildern und anderen Inhalten. HTML-Dokumente sind die Grundlage des World Wide Web und werden von Webbrowsern dargestellt. Neben den vom Browser angezeigten Inhalten können HTML-Dateien zusätzliche Angaben in Form von Metainformationen enthalten, z. B. über die im Text verwendeten Sprachen, den Autor oder den zusammengefassten Inhalt des Textes. HTML wird vom World Wide Web Consortium (W3C) und der Web Hypertext Application Technology Working Group (WHATWG) weiterentwickelt. Die aktuelle Version ist seit dem 28. Oktober 2014 HTML5,[4] die bereits von vielen aktuellen Webbrowsern und anderen Layout-Engines unterstützt wird. siehe https://de.wikipedia.org/wiki/Hypertext_Markup_Language"
          },
          {
            "text": "CSS",
            "comment": "Cascading Style Sheets (englische Aussprache [kæsˌkeɪdɪŋˈstaɪlʃiːts]; für gestufte Gestaltungsbögen), kurz CSS genannt, ist eine Stylesheet-Sprache für elektronische Dokumente und zusammen mit HTML und DOM eine der Kernsprachen des World Wide Webs. Sie ist ein so genannter „living standard“ (lebendiger Standard) und wird vom World Wide Web Consortium (W3C) beständig weiterentwickelt. Mit CSS werden Gestaltungsanweisungen erstellt, die vor allem zusammen mit den Auszeichnungssprachen HTML und XML (zum Beispiel bei SVG) eingesetzt werden. siehe https://de.wikipedia.org/wiki/Cascading_Style_Sheets"
          },
          {
            "text": "JavaScript",
            "comment": "JavaScript (kurz JS) ist eine Skriptsprache, die ursprünglich für dynamisches HTML in Webbrowsern entwickelt wurde, um Benutzerinteraktionen auszuwerten, Inhalte zu verändern, nachzuladen oder zu generieren und so die Möglichkeiten von HTML und CSS zu erweitern. Heute findet JavaScript auch außerhalb von Browsern Anwendung, so etwa auf Servern und in Microcontrollern. siehe https://de.wikipedia.org/wiki/JavaScript"
          },
          {
            "text": "JSON",
            "comment": "Die JavaScript Object Notation, kurz JSON, ist ein kompaktes Datenformat in einer einfach lesbaren Textform zum Zweck des Datenaustauschs zwischen Anwendungen. Jedes gültige JSON-Dokument soll ein gültiges JavaScript sein und per eval() interpretiert werden können, siehe https://de.wikipedia.org/wiki/JavaScript_Object_Notation und http://www.json.org/"
          },
          {
            "text": "JSONP",
            "comment": "JSONP (JSON mit Padding) ermöglicht die Übertragung von (JSON-)Daten über Domaingrenzen hinweg. Üblicherweise erfolgen Ajax-Datenabfragen an Server über das XMLHttpRequest-Objekt eines Webbrowsers. Aufgrund der Same-Origin-Policy funktioniert das nicht, wenn die in einem Webbrowser angezeigte Webseite über dieses Objekt auf einen Server zuzugreifen versucht, der in einer anderen Domain als die angezeigte Webseite liegt. Das Problem kann durch JSONP umgangen werden. siehe https://de.wikipedia.org/wiki/JavaScript_Object_Notation"
          },
          {
            "text": "Ajax",
            "comment": "Ajax (auch AJAX; Apronym von engl. Asynchronous JavaScript and XML) bezeichnet ein Konzept der asynchronen Datenübertragung zwischen einem Browser und dem Server. Dieses ermöglicht es, HTTP-Anfragen durchzuführen, während eine HTML-Seite angezeigt wird, und die Seite zu verändern, ohne sie komplett neu zu laden. Das findet man in allen modernen Web-Seiten und -Anwendungen."
          },
          {
            "text": "jQuery",
            "comment": "jQuery ist die am weitesten verbreitete JavaScript-Library und wird auch in der ccm-Programmierung gerne verwendet. Die Abhängigkeit des ccm.js von jQuery.js ist jedoch nicht so groß. Man könnte auch eine jQuery-freie Variante von ccm.js erstellen."
          },
          {
            "text": "Laufzeitumgebung ccm.js",
            "comment": "Die Laufzeitumgebung ccm.js ist nur 19 kB groß und wird immer vorausgesetzt und muss daher als erstes geladen werden."
          },
          {
            "text": "verteilte ccm-Komponenten",
            "comment": "so verteilt wie Hypertexte im WWW. D.h. die ursprüngliche Idee von Tim-Berners Lee für Hypertexte wird nun übertragen Software mittels einer Art Hyperkomponenten."
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2,3,4,5,6,7,8,9]
      },
      {
        "text": "Wie unterscheiden sich fachliche und technische Modularisierung?",
        "answers": [
          {
            "text": "Fachliche Modularisierung orientiert sich an fachlichen Inhalten.",
            "comment": "Für die fachliche Zerlegung einer App in Module benötigt man einen Komponentenansatz. Dieser wird z.B. mit ccm zur Verfügung gestellt."
          },
          {
            "text": "Technische Modularisierung orientiert sich an Technikaspekten.",
            "comment": "Die technische Zerlegung in Struktur, Layout und Interaktionslogik ist bereits mit HTML, CSS und JavaScript gegeben. "
          }
        ],
        "input": "checkbox",
        "correct": [0,1]
      },
      {
        "text": "Was sind die Prinzipien und Konzepte für verteilte Web-Komponenten?",
        "answers": [
          {
            "text": "Lego-Prinzip",
            "comment": "auch Baustein-/Baukasten-Prinzip: Wie stellt man vielfältige Produkte her, ohne dass die Kosten explodieren? Vielfalt wird durch das Lego-Prinzip kostengünstig. Statt weniger Plattformen haben die Ingenieure viele Module, die sie vielfältig kombinieren können. Auch der Autobau verfährt nach diesem Prinzip. Daher ist es naheliegend, das Lego-Prinzip auch im WWW einzusetzen."
          },
          {
            "text": "Wiederverwendbarkeit von Komponenten in unterschiedlichen Anwendungen",
            "comment": "Das Prinzip der Wiederverwendbarkeit ist sehr grundlegend in der Informatik und gilt auch hier."
          },
          {
            "text": "Vielfältige Einbettbarkeit der Bausteine",
            "comment": "Verteilte Web-Komponenten sollen möglichst vielfältig einsetzbar sein, d.h. cross domain, cross platform, cross browser."
          },
          {
            "text": "Responsive Design",
            "comment": "Weil die Bausteine in allen Anwendungen in allen modernen Browsern auf allen Plattformen ablaufen sollen, bekommt Responsive Design einen besonderen Stellenwert."
          },
          {
            "text": "Browser steht im Mittelpunkt",
            "comment": "Browser als Plattform für technische Integration, für Kommunikation, für Kooperation, für Kollaboration. Server nur noch für minimale Dienste. Server erhalten eine andere (reduzierte) Rolle. Reduktion auf REST-Dienste, Ajax, Microservices"
          },
          {
            "text": "Komponenten werden über einen Komponenten-Marktplatz gehandelt / ausgetauscht.",
            "comment": "Wiederverwendbarkeit von Komponenten erhöht die gesamtwirtschaftliche Produktivität. Daher müssen teuer produzierte Komponenten möglichst vielfach zum Einsatz kommen. Dadurch verringern sich die Herstellungskosten der Produkte."
          },
          {
            "text": "Fachliche UND technische Modularität",
            "comment": "Die technische Zerlegung in Struktur, Layout und Interaktionslogik ist bereits mit HTML, CSS und JavaScript gegeben. Für die fachliche Zerlegung einer App in Module benötigt man einen Komponentenansatz. Dieser wird z.B. mit ccm zur Verfügung gestellt. "
          },
          {
            "text": "Digitale Industrie",
            "comment": "Industrialisierung bedeutet Infrastruktur, Spezialisierung, Wettbewerb auf Märkten, Skalierung, Innovation. Diese Prinzipien sind auch auf die digitale Welt anzuwenden und Märkte von verteilten Web-Komponenten können dabei eine wichtige Rolle spielen."
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2,3,4,5,6,7]
      }
    ]
  },

  "phase_03_owasp_1": {
    "key": "phase_03_owasp_1",
    "title": "OWASP Appsec Tutorial 1",
    "questions": [
      {
        "text": "Was ist bei der Sicherheit von WebApps der Normalfall?",
        "answers": [
          {
            "text": "Die WebApps sind normalerweise sicher.",
            "comment": "Most Sites are not secure."
          },
          {
            "text": "Die WebApps sind normalerweise unsicher.",
            "comment": "Most Sites are not secure."
          }
        ],
        "input": "radio",
        "correct": [1]
      },
      {
        "text": "War das WWW von Anfang an als sichere Anwendungsplattform konzipiert worden?",
        "answers": [
          {
            "text": "Ja. Dafür hat Tim-Berners Lee viele Preise und Ehrungen erhalten.",
            "comment": "Nicht dafür, sondern für das WWW an sich. Tim Berners-Lee dachte bei der Erfindung an vernetzte statische Hypertexte der CERN-Physiker, nicht an dynamische Anwendungen."
          },
          {
            "text": "Nein.",
            "comment": "Das WWW war als verteilte statische READ-ONLY Hypertexte konzipiert gewesen, nicht als sichere Applikationsplattform."
          }
        ],
        "input": "radio",
        "correct": [1]
      },
      {
        "text": "Wie kann man für Sicherheit in WWW-Anwendungen sorgen?",
        "answers": [
          {
            "text": "Man kann sich auf die Grundlagen des WWW verlassen, da diese bereits sicher sind.",
            "comment": "Nein, die Grundlagen des WWW sind nicht per se sicher. Das WWW war als verteilte statische READ-ONLY Hypertexte konzipiert gewesen. Dafür ist es sicher. Für mehr nicht. Heute haben wir aber in der Mehrzahl Anwendungen in den Hypertexten. Diese sind nicht sicher."
          },
          {
            "text": "Man muss bei dem Bau von Anwendungen selbstständig für Sicherheit sorgen und alle Maßnahmen dafür einplanen und ergreifen.",
            "comment": "Die Sicherheitslücken in der Anwendung werden durch die Sicherheit der WWW-Plattform nicht geschlossen. Das WWW war als verteilte statische READ-ONLY Hypertexte konzipiert gewesen. Dafür ist es sicher. Für mehr nicht. Heute haben wir aber in der Mehrzahl Anwendungen in den Hypertexten. Diese sind nicht sicher."
          }
        ],
        "input": "radio",
        "correct": [1]
      },
      {
        "text": "Welche Angriffsarten gibt es im WWW?",
        "answers": [
          {
            "text": "Angriffe auf die Infrastruktur",
            "comment": "Diese Angriffe sind zwar nicht auf der WWW-Technologieebene, können sich aber dort auch schädlich auswirken."
          },
          {
            "text": "Netzwerkangriffe",
            "comment": "Diese Angriffe sind zwar nicht auf der WWW-Technologieebene, können sich aber dort auch schädlich auswirken."
          },
          {
            "text": "Angriffe auf der Anwendungsebene / Programmierebene",
            "comment": "Open Web Application Security Project (OWASP) wendet sich genau dieser Thematik zu. "
          },
          {
            "text": "XSS",
            "comment": "Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it. see https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)"
          },
          {
            "text": "CSRF",
            "comment": "Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. If the victim is an administrative account, CSRF can compromise the entire web application. see https://www.owasp.org/index.php/CSRF"
          },
          {
            "text": "Parameter Tampering",
            "comment": "The Web Parameter Tampering attack is based on the manipulation of parameters exchanged between client and server in order to modify application data, such as user credentials and permissions, price and quantity of products, etc. Usually, this information is stored in cookies, hidden form fields, or URL Query Strings, and is used to increase application functionality and control. see https://www.owasp.org/index.php/Web_Parameter_Tampering"
          },
          {
            "text": "Directory Traversal",
            "comment": "A path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. It should be noted that access to files is limited by system operational access control (such as in the case of locked or in-use files on the Microsoft Windows operating system). This attack is also known as “dot-dot-slash”, “directory traversal”, “directory climbing” and “backtracking”. see https://www.owasp.org/index.php/Path_Traversal"
          },
          {
            "text": "Direct Object Reference",
            "comment": "Direct Object Reference is fundamentally a Access Control problem. We split it out to emphasize the difference between URL access control and data layer access control. see https://www.owasp.org/index.php/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet"
          },
          {
            "text": "Command Injection",
            "comment": "Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation. see https://www.owasp.org/index.php/Command_Injection"
          },
          {
            "text": "SQL Injection",
            "comment": "A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to effect the execution of predefined SQL commands. see https://www.owasp.org/index.php/SQL_Injection"
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2,3,4,5,6,7,8,9]
      }
    ]
  },

  "phase_03_owasp_2": {
    "key": "phase_03_owasp_2",
    "title": "OWASP Appsec Tutorial 2",
    "questions": [
      {
        "text": "Was ist die Top-Sicherheitslücke im WWW?",
        "answers": [
          {
            "text": "XSS",
            "comment": "Wichtige Attacke, aber nicht die die Top-Sicherheitslücke im WWW. Zur Definition: Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it. see https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)"
          },
          {
            "text": "CSRF",
            "comment": "Wichtige Attacke, aber nicht die die Top-Sicherheitslücke im WWW. Zur Definition: Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. If the victim is an administrative account, CSRF can compromise the entire web application. see https://www.owasp.org/index.php/CSRF"
          },
          {
            "text": "SQL Injection",
            "comment": "A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to effect the execution of predefined SQL commands. see https://www.owasp.org/index.php/SQL_Injection"
          },
          {
            "text": "Forced browsing",
            "comment": "Wichtige Attacke, aber nicht die die Top-Sicherheitslücke im WWW. Zur Definition: Forced browsing is an attack where the aim is to enumerate and access resources that are not referenced by the application, but are still accessible. An attacker can use Brute Force techniques to search for unlinked contents in the domain directory, such as temporary directories and files, and old backup and configuration files. These resources may store sensitive information about web applications and operational systems, such as source code, credentials, internal network addressing, and so on, thus being considered a valuable resource for intruders. This attack is performed manually when the application index directories and pages are based on number generation or predictable values, or using automated tools for common files and directory names. see https://www.owasp.org/index.php/Forced_browsing"
          },
          {
            "text": "Denial of Service (DoS)",
            "comment": "Wichtige Attacke, aber nicht die die Top-Sicherheitslücke im WWW. Zur Definition: The Denial of Service (DoS) attack is focused on making a resource (site, application, server) unavailable for the purpose it was designed. There are many ways to make a service unavailable for legitimate users by manipulating network packets, programming, logical, or resources handling vulnerabilities, among others. If a service receives a very large number of requests, it may cease to be available to legitimate users. In the same way, a service may stop if a programming vulnerability is exploited, or the way the service handles resources it uses. see https://www.owasp.org/index.php/Denial_of_Service"
          }
        ],
        "input": "radio",
        "correct": [2]
      },
      {
        "text": "Was macht SQL-Injection zur Top-Sicherheitslücke im WWW?",
        "answers": [
          {
            "text": "ist am bekanntesten",
            "comment": "Der Bekanntheitsgrad macht SQL-Injection nicht zur Top-Sicherheitslücke im WWW."
          },
          {
            "text": "ist am beliebtesten",
            "comment": "Der Beliebtheitsgrad macht SQL-Injection nicht zur Top-Sicherheitslücke im WWW."
          },
          {
            "text": "einfach zu erschließen",
            "comment": "im Video heißt es 'easy to exploit'. Attacker sends simple text-based attacks that exploit the syntax of the targeted interpreter. Almost any source of data can be an injection vector, including internal sources. see https://www.owasp.org/index.php/Top_10_2013-A1-Injection"
          },
          {
            "text": "kommt häufig im WWW vor",
            "comment": "im Video heißt es 'common in web apps'. Injection flaws occur when an application sends untrusted data to an interpreter. Injection flaws are very prevalent, particularly in legacy code. They are often found in SQL, LDAP, Xpath, or NoSQL queries; OS commands; XML parsers, SMTP Headers, program arguments, etc. Injection flaws are easy to discover when examining code, but frequently hard to discover via testing. Scanners and fuzzers can help attackers find injection flaws. see https://www.owasp.org/index.php/Top_10_2013-A1-Injection"
          },
          {
            "text": "hat ernste Auswirkungen",
            "comment": "im Video heißt es 'severe impact'. Injection can result in data loss or corruption, lack of accountability, or denial of access. Injection can sometimes lead to complete host takeover. Consider the business value of the affected data and the platform running the interpreter. All data could be stolen, modified, or deleted. Could your reputation be harmed? see  https://www.owasp.org/index.php/Top_10_2013-A1-Injection"
          }
        ],
        "input": "checkbox",
        "correct": [2,3,4]
      },
      {
        "text": "Was ist eine SQL-Injection in einem Namensfeld?",
        "answers": [
          {
            "text": "SQL injection",
            "comment": "Das würde nur als Name eingetragen. Das ist keine Attacke."
          },
          {
            "text": " Jerry' or '1'='1 ",
            "comment": "im Video an der Stelle 3:19"
          },
          {
            "text": " == true ",
            "comment": "Das würde nur als Name eingetragen. Das ist keine Attacke."
          }
        ],
        "input": "checkbox",
        "correct": [1]
      },
      {
        "text": "Welche Mittel helfen gegen SQL Injection?",
        "answers": [
          {
            "text": "Parameterized Queries",
            "comment": "SQL Injection is best prevented through the use of parameterized queries (in SQL prepared statements and stored procedures). see https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"
          },
          {
            "text": "prepared statements",
            "comment": "Ein Prepared Statement ist eine sogenannte vorbereitete Anweisung für ein Datenbanksystem. Im Gegensatz zu gewöhnlichen Statements enthält es noch keine Parameterwerte. Stattdessen werden dem Datenbanksystem Platzhalter übergeben. Mittels Prepared Statements können SQL-Injections effektiv verhindert werden, da das Datenbanksystem die Gültigkeit von Parametern prüft, bevor diese verarbeitet werden. see https://de.wikipedia.org/wiki/Prepared_Statement"
          },
          {
            "text": "stored procedures",
            "comment": "Eine gespeicherte Prozedur (englisch stored procedure) ist eine Funktion in Datenbankmanagementsystemen, mit der ganze Abläufe von Anweisungen vom Datenbank-Client aufgerufen werden können. Sie ist somit ein eigenständiger Befehl, der eine Abfolge gespeicherter Befehle ausführt. Gespeicherte Prozeduren werden im Data-Dictionary der jeweiligen Datenbank gespeichert. https://de.wikipedia.org/wiki/Gespeicherte_Prozedur"
          },
          {
            "text": "Whitelisting",
            "comment": "Positive or “white list” input validation is also recommended, but is not a complete defense as many applications require special characters in their input, see https://www.owasp.org/index.php/Top_10_2013-A1-Injection"
          },
          {
            "text": "OWASP-ESAPI-Encoder",
            "comment": "Die OWASP-ESAPI-Encoder codieren die Eingabeparameter und filtern Injection-Zeichen heraus. Z.B. convert string to int. Eingaben sind immer vom Typ string. Wenn der string eine Zahl darstellt, ist eine Konvertierung in int angebracht. Die parseInt()-Funktion interpretiert nur Ziffern. Viele Injection-Attacken werden schon allein dadurch verhindert."
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2,3]
      },
      {
        "text": "Welche Interpreter sind gegen Injection generell anfällig?",
        "answers": [
          {
            "text": "alle Datenbanken",
            "comment": "Alle Datenbanken sind gegen Injection generell anfällig, weil sie für den Datenzugriff und für die Datenmanipulation intepretierte Sprachen verwenden, nicht nur SQL."
          },
          {
            "text": "LDAP",
            "comment": "Das Lightweight Directory Access Protocol [ˈlaɪtweɪt daɪrektəri: ækses ˈprəʊtəkɒl] (LDAP), deutsch etwa Leichtgewichtiges Verzeichniszugriffsprotokoll, ist ein Netzwerkprotokoll zur Abfrage und Änderung von Informationen verteilter Verzeichnisdienste."
          },
          {
            "text": "XPath",
            "comment": "Die XML Path Language (XPath) ist eine vom W3-Konsortium entwickelte Abfragesprache, um Teile eines XML-Dokumentes zu adressieren und auszuwerten."
          },
          {
            "text": "XSLT",
            "comment": "XSL Transformation, kurz XSLT, ist eine Programmiersprache zur Transformation von XML-Dokumenten. Sie ist Teil der Extensible Stylesheet Language (XSL) und stellt eine turing-vollständige[2] Sprache dar."
          },
          {
            "text": "XML-Interpreter",
            "comment": "Die XML Path Language (XPath) ist eine vom W3-Konsortium entwickelte Abfragesprache, um Teile eines XML-Dokumentes zu adressieren und auszuwerten. XPath dient als Grundlage einer Reihe weiterer Standards wie XSLT, XPointer und XQuery. "
          },
          {
            "text": "Logs",
            "comment": "Eine Logdatei (auch Ereignisprotokolldatei; englisch log file) enthält das automatisch geführte Protokoll aller oder bestimmter Aktionen von Prozessen auf einem Computersystem. Die korrekte Bezeichnung dafür ist deshalb Protokolldatei. Injection bedeutet hier, dass der Logeintrag nicht in eine Zeile passt und mehrere Logeinträge vortäuschen kann."
          },
          {
            "text": "OS commands",
            "comment": "In allen Programmiersprachen gibt es eine Schnittstelle zum Betriebssystem und seine Shell. Über Webabfragen können indirekt OS Commands ausgelöst werden und durch geschickte Parameter ist es prinzipiell möglich, die Kontrolle über den Server zu erlangen."
          },
          {
            "text": "JavaScript",
            "comment": "siehe XSS. Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it. see https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)"
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2,3,4,5,6,7,8]
      }
    ]
  },


  "phase_03_owasp_3": {
    "key": "phase_03_owasp_3",
    "title": "OWASP Appsec Tutorial 3",
    "questions": [
      {
        "text": "In welcher Sprache finden XSS-Attacken statt?",
        "answers": [
          {
            "text": "SQL",
            "comment": ""
          },
          {
            "text": "JavaScript",
            "comment": ""
          }
        ],
        "input": "checkbox",
        "correct": [1]
      },
      {
        "text": "Wer ist das Ziel von XSS-Attacken?",
        "answers": [
          {
            "text": "die Datenbank der Website",
            "comment": "Das ist bei SQL Injection der Fall, nicht bei XSS, jedenfalls nicht unmittelbar. Allerdings könnte auf Umwegen auch die Datenbank betroffen sein."
          },
          {
            "text": "andere User der gleichen Website",
            "comment": "XSS enables attackers to inject client-side scripts into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same-origin policy. https://en.wikipedia.org/wiki/Cross-site_scripting"
          }
        ],
        "input": "checkbox",
        "correct": [1]
      },
      {
        "text": "Ist für eine XSS-Attacke ein &lt;script>-Tag notwendig? ?",
        "answers": [
          {
            "text": "Ja.",
            "comment": "Das &lt;script>-Tag ist nicht die einzige Möglichkeit, JavaScript-Code einzuschmuggeln. Mit onmouseover geht es z.B auch."
          },
          {
            "text": "Nein.",
            "comment": "Es geht auch mit Event-Handlern wie \" onmouseover=\"evil_code\", siehe 7:30 im Video."
          }
        ],
        "input": "radio",
        "correct": [1]
      },
      {
        "text": "Was ist die grundsätzliche Ursache für XSS-Sicherheitslücken?",
        "answers": [
          {
            "text": "fehlende Validierung von User Input",
            "comment": "JavaScript-Event-Handler und -Scripts werden überhaupt nicht erkannt"
          },
          {
            "text": "unzureichende Validierung von User Input",
            "comment": "JavaScript-Event-Handler und -Scripts werden teilweise nicht erkannt"
          },
          {
            "text": "fehlende Encodierung von User Input",
            "comment": "User Input wird nicht encodiert und der JavaScript-Code kann ungehindert in die Webseite gelangen"
          },
          {
            "text": "unzureichende Encodierung von User Input",
            "comment": "User Input wird unzureichend encodiert und der JavaScript-Code kann teilweise in die Webseite gelangen"
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2,3]
      },
      {
        "text": "Warum wird das positive Sicherheitsmodell bevorzugt?",
        "answers": [
          {
            "text": "Man sollte immer positiv denken.",
            "comment": "Blödsinn."
          },
          {
            "text": "Beim positiven Sicherheitsmodell definiert man, welche Benutzer-Eingaben erlaubt sind.",
            "comment": "A \"positive\" security model (also known as \"whitelist\") is one that defines what is allowed, and rejects everything else. This should be contrasted with a \"negative\" (or \"blacklist\") security model, which defines what is disallowed, while implicitly allowing everything else. see https://www.owasp.org/index.php/Positive_security_model"
          },
          {
            "text": "Beim negativen Sicherheitsmodell definiert man, welche Benutzer-Eingaben verboten sind.",
            "comment": "A \"positive\" security model (also known as \"whitelist\") is one that defines what is allowed, and rejects everything else. This should be contrasted with a \"negative\" (or \"blacklist\") security model, which defines what is disallowed, while implicitly allowing everything else. see https://www.owasp.org/index.php/Positive_security_model"
          },
          {
            "text": "Beim negativen Sicherheitsmodell muss man die Liste der Verbote immer erweitern, wenn neue Attacken erfunden werden.",
            "comment": "The benefit of using a positive model is that new attacks, not anticipated by the developer, will be prevented. However, the negative model can be quite tempting when you're trying to prevent an attack on your site. Ultimately, however, adopting the negative model means that you'll never be quite sure that you've addressed everything. You'll also end up with a long list of negative signatures to block that has to be maintained. see https://www.owasp.org/index.php/Positive_security_model"
          },
          {
            "text": "Beim negativen Sicherheitsmodell muss man die Liste der Verbote nicht erweitern, wenn neue Attacken erfunden werden.",
            "comment": "The benefit of using a positive model is that new attacks, not anticipated by the developer, will be prevented. However, the negative model can be quite tempting when you're trying to prevent an attack on your site. Ultimately, however, adopting the negative model means that you'll never be quite sure that you've addressed everything. You'll also end up with a long list of negative signatures to block that has to be maintained. see https://www.owasp.org/index.php/Positive_security_model"
          },
          {
            "text": "Beim positiven Sicherheitsmodell muss man die Liste der Benutzer-Eingaben immer erweitern, wenn neue Attacken erfunden werden.",
            "comment": "The benefit of using a positive model is that new attacks, not anticipated by the developer, will be prevented. However, the negative model can be quite tempting when you're trying to prevent an attack on your site. Ultimately, however, adopting the negative model means that you'll never be quite sure that you've addressed everything. You'll also end up with a long list of negative signatures to block that has to be maintained. see https://www.owasp.org/index.php/Positive_security_model"
          },
          {
            "text": "Beim positiven Sicherheitsmodell muss man die Liste der Benutzer-Eingaben nicht erweitern, wenn neue Attacken erfunden werden. Das macht die Wartung der Software einfacher.",
            "comment": "The benefit of using a positive model is that new attacks, not anticipated by the developer, will be prevented. However, the negative model can be quite tempting when you're trying to prevent an attack on your site. Ultimately, however, adopting the negative model means that you'll never be quite sure that you've addressed everything. You'll also end up with a long list of negative signatures to block that has to be maintained. see https://www.owasp.org/index.php/Positive_security_model"
          }
        ],
        "input": "checkbox",
        "correct": [1,2,3,6]
      }
    ]
  },

  "phase_03_owasp_4": {
    "key": "phase_03_owasp_4",
    "title": "OWASP Appsec Tutorial 4",
    "questions": [
      {
        "text": "Darf man die Sicherheit nach dem Login von https auf http herab stufen?",
        "answers": [
          {
            "text": "Ja, weil das Passwort sicher transportiert wurde.",
            "comment": "Nach dem Login werden alle Informationen im Klartext übertragen, also auch emails, Session Cookie, Tokens, usw."
          },
          {
            "text": "Nein.",
            "comment": "Weil nach dem Login werden alle Informationen im Klartext übertragen, also auch emails, Session Cookie, Tokens, usw."
          },
          {
            "text": "Nein. Man sollte die gesamte Website mit https betreiben.",
            "comment": "sonst werden alle Informationen im Klartext übertragen, also auch emails, Session Cookie, Tokens, usw."
          }
        ],
        "input": "checkbox",
        "correct": [1,2]
      },
      {
        "text": "Was ist 'Man-in-the-Middle-Attack'?",
        "answers": [
          {
            "text": "wenn sich jemand zwischen Sender und Empfänger schaltet",
            "comment": "The man-in-the middle attack intercepts a communication between two systems. For example, in an http transaction the target is the TCP connection between client and server. Using different techniques, the attacker splits the original TCP connection into 2 new connections, one between the client and the attacker and the other between the attacker and the server, as shown in figure 1. Once the TCP connection is intercepted, the attacker acts as a proxy, being able to read, insert and modify the data in the intercepted communication. see https://www.owasp.org/index.php/Man-in-the-middle_attack"
          },
          {
            "text": "wenn jemand einen freien WLAN-Hotspot anbietet",
            "comment": "Ja, freier WLAN-Hotspot ist ein beliebtes Szenario."
          },
          {
            "text": "Der Man-in-the-Middle-Attack geht nur bei http, nicht bei https",
            "comment": "The MITM attack could also be done over an https connection by using the same technique; the only difference consists in the establishment of two independent SSL sessions, one over each TCP connection. The browser sets a SSL connection with the attacker, and the attacker establishes another SSL connection with the web server. In general the browser warns the user that the digital certificate used is not valid, but the user may ignore the warning because he doesn’t understand the threat. In some specific contexts it’s possible that the warning doesn’t appear, as for example, when the Server certificate is compromised by the attacker or when the attacker certificate is signed by a trusted CA and the CN is the same of the original web site. see https://www.owasp.org/index.php/Man-in-the-middle_attack"
          }
        ],
        "input": "checkbox",
        "correct": [0,1,2]
      },
      {
        "text": "Was ist HSTS?",
        "answers": [
          {
            "text": "HTTP Strict Transport Security",
            "comment": "HTTP Strict Transport Security (HSTS) is an opt-in security enhancement that is specified by a web application through the use of a special response header. Once a supported browser receives this header that browser will prevent any communications from being sent over HTTP to the specified domain and will instead send all communications over HTTPS. It also prevents HTTPS click through prompts on browsers. see https://www.owasp.org/index.php/HTTP_Strict_Transport_Security"
          },
          {
            "text": "ein zusätzlicher HTTP-Header Strict-Transport-Security: max-age=31536000",
            "comment": "https://www.owasp.org/index.php/HTTP_Strict_Transport_Security"
          }
        ],
        "input": "checkbox",
        "correct": [0,1]
      }
    ]
  },

  "git_quiz": {
    "key": "git_quiz",
    "title": "git Quiz",
    "questions": [
      {
        "text": "Was sind die Prinzipien von git?",
        "answers": [
          {
            "text": "abc",
            "comment": ""
          },
          {
            "text": "abc",
            "comment": ""
          }
        ],
        "input": "checkbox",
        "correct": [1]
      },
      {
        "text": "",
        "answers": [
          {
            "text": "abc",
            "comment": ""
          },
          {
            "text": "abc",
            "comment": ""
          }
        ],
        "input": "checkbox",
        "correct": [1]
      },
      {
        "text": "?",
        "answers": [
          {
            "text": "abc",
            "comment": ""
          },
          {
            "text": "abc",
            "comment": ""
          }
        ],
        "input": "checkbox",
        "correct": [1]
      }
    ]
  },

  "quiz_muster": {
    "key": "quiz_muster",
    "title": "Quiz-Muster",
    "questions": [
      {
        "text": "Was ist XYZ?",
        "answers": [
          {
            "text": "abc",
            "comment": ""
          },
          {
            "text": "abc",
            "comment": ""
          }
        ],
        "input": "checkbox",
        "correct": [1]
      }
    ]
  }
}